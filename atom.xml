<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>水华的博客</title>
  
  <subtitle>知行合一</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.mizuka.top/"/>
  <updated>2019-10-18T07:55:16.115Z</updated>
  <id>https://www.mizuka.top/</id>
  
  <author>
    <name>Mizuka</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>文字超过x行后补上省略号的几种办法</title>
    <link href="https://www.mizuka.top/2019/10/18/%E6%96%87%E5%AD%97%E8%B6%85%E8%BF%87x%E8%A1%8C%E5%90%8E%E8%A1%A5%E4%B8%8A%E7%9C%81%E7%95%A5%E5%8F%B7%E7%9A%84%E5%87%A0%E7%A7%8D%E5%8A%9E%E6%B3%95/"/>
    <id>https://www.mizuka.top/2019/10/18/文字超过x行后补上省略号的几种办法/</id>
    <published>2019-10-18T12:11:57.000Z</published>
    <updated>2019-10-18T07:55:16.115Z</updated>
    
    <content type="html"><![CDATA[<h1 id="文字超过-x-行后补上省略号的几种办法"><a href="#文字超过-x-行后补上省略号的几种办法" class="headerlink" title="文字超过 x 行后补上省略号的几种办法"></a>文字超过 x 行后补上省略号的几种办法</h1><p><a href="https://css-tricks.com/line-clampin/" target="_blank" rel="noopener">原文</a></p><p>简单来说，在 pc 端，文字过长溢出的话，溢出的部分会被替换成<code>...</code>,然而在显示情况中，更多的是在超过 x 行之后才启用这个特性，例如</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"module"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">    Pellentesque habitant morbi tristique senectus et netus et malesuada fames</span><br><span class="line">    ac turpis egestas. Vestibulum tortor quam, feugiat vitae, ultricies eget,</span><br><span class="line">    tempor sit amet, ante. Donec eu libero sit amet quam egestas semper. Aenean</span><br><span class="line">    ultricies mi vitae est. Mauris placerat eleifend leo.</span><br><span class="line">  <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>最终希望三行之后到这种效果<img src="https://css-tricks.com/wp-content/uploads/2013/05/clamped.png" alt=""></p><p>为了演示，我们先定义基础的 css，剩下的方法都在这个 css 的基础之上</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.module</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">250px</span>;</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Weird-WebKit-Flexbox-Way"><a href="#Weird-WebKit-Flexbox-Way" class="headerlink" title="Weird WebKit Flexbox Way"></a>Weird WebKit Flexbox Way</h2><p>使用 webkit 内置的方案</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.line-clamp</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: -webkit-box;</span><br><span class="line">  <span class="attribute">-webkit-line-clamp</span>: <span class="number">3</span>;</span><br><span class="line">  <span class="attribute">-webkit-box-orient</span>: vertical;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种方案只有 webkit 内核的浏览器支持，在使用上遇到一个问题，就是 autoprefixer 会移除<code>-webkit-box-orient: vertical;</code><br>所以我们需要增加个注释</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.line-clamp</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: -webkit-box;</span><br><span class="line">  <span class="attribute">-webkit-line-clamp</span>: <span class="number">3</span>;</span><br><span class="line">  <span class="comment">/* autoprefixer: ignore next */</span></span><br><span class="line">  <span class="attribute">-webkit-box-orient</span>: vertical;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="The-Opera-Overflow-Way"><a href="#The-Opera-Overflow-Way" class="headerlink" title="The Opera Overflow Way"></a>The Opera Overflow Way</h2><p>Opera 浏览器的方案，和 webkit 差不多</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.line-clamp</span> &#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">3.6em</span>; <span class="comment">/* 1em为1个line-height的高度，这里表示3行 */</span></span><br><span class="line">  <span class="attribute">text-overflow</span>: -o-ellipsis-lastline;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="The-Clamp-js-Way"><a href="#The-Clamp-js-Way" class="headerlink" title="The Clamp.js Way"></a>The Clamp.js Way</h2><p>使用 Clamp.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="built_in">module</span> = <span class="built_in">document</span>.getElementById(<span class="string">"clamp-this-module"</span>);</span><br><span class="line"></span><br><span class="line">$clamp(<span class="built_in">module</span>, &#123; <span class="attr">clamp</span>: <span class="number">3</span> &#125;);</span><br></pre></td></tr></table></figure><p>建议包裹在<code>&lt;p id=&quot;clamp-this-module&quot;&gt;&lt;/p&gt;</code>中保证 firefox 正常使用</p><h1 id="以下是原文的几种显示方案"><a href="#以下是原文的几种显示方案" class="headerlink" title="以下是原文的几种显示方案"></a>以下是原文的几种显示方案</h1><iframe height="265" style="width: 100%;" scrolling="no" title="Line Clampin'" src="https://codepen.io/chriscoyier/embed/iBtep?height=265&theme-id=0&default-tab=js,result" frameborder="no" allowtransparency="true" allowfullscreen="true"><br>  See the Pen <a href="https://codepen.io/chriscoyier/pen/iBtep" target="_blank" rel="noopener">Line Clampin’</a> by Chris Coyier<br>  (<a href="https://codepen.io/chriscoyier" target="_blank" rel="noopener">@chriscoyier</a>) on <a href="https://codepen.io" target="_blank" rel="noopener">CodePen</a>.<br></iframe>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;文字超过-x-行后补上省略号的几种办法&quot;&gt;&lt;a href=&quot;#文字超过-x-行后补上省略号的几种办法&quot; class=&quot;headerlink&quot; title=&quot;文字超过 x 行后补上省略号的几种办法&quot;&gt;&lt;/a&gt;文字超过 x 行后补上省略号的几种办法&lt;/h1&gt;&lt;p&gt;&lt;a
      
    
    </summary>
    
      <category term="可以公开的情报" scheme="https://www.mizuka.top/categories/%E5%8F%AF%E4%BB%A5%E5%85%AC%E5%BC%80%E7%9A%84%E6%83%85%E6%8A%A5/"/>
    
    
      <category term="前端" scheme="https://www.mizuka.top/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="经验" scheme="https://www.mizuka.top/tags/%E7%BB%8F%E9%AA%8C/"/>
    
      <category term="超过x行" scheme="https://www.mizuka.top/tags/%E8%B6%85%E8%BF%87x%E8%A1%8C/"/>
    
      <category term="省略号" scheme="https://www.mizuka.top/tags/%E7%9C%81%E7%95%A5%E5%8F%B7/"/>
    
      <category term="overflow" scheme="https://www.mizuka.top/tags/overflow/"/>
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://www.mizuka.top/2019/10/18/RN2Flutter/"/>
    <id>https://www.mizuka.top/2019/10/18/RN2Flutter/</id>
    <published>2019-10-18T07:55:16.111Z</published>
    <updated>2019-10-18T07:55:16.111Z</updated>
    
    <content type="html"><![CDATA[<h1 id="RN2Flutter"><a href="#RN2Flutter" class="headerlink" title="RN2Flutter"></a>RN2Flutter</h1><h2 id="Flutter环境安装"><a href="#Flutter环境安装" class="headerlink" title="Flutter环境安装"></a>Flutter环境安装</h2><p>fultter需要安装配置环境，主要是dart和flutter，vscode需要安装flutter插件</p><h3 id="dart"><a href="#dart" class="headerlink" title="dart"></a>dart</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">brew tap dart-lang/dart</span><br><span class="line">brew install dart</span><br></pre></td></tr></table></figure><p>dart 安装完成</p><h3 id="Flutter"><a href="#Flutter" class="headerlink" title="Flutter"></a>Flutter</h3><p>使用第三方传入到brew的镜像进行安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">brew tap MiderWong/flutter</span><br><span class="line">brew install flutter</span><br></pre></td></tr></table></figure><h3 id="其他依赖"><a href="#其他依赖" class="headerlink" title="其他依赖"></a>其他依赖</h3><p>设定依赖为国内镜像之后进行自动安装即可<br>.zshrc .bash_profile都需要加</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> PUB_HOSTED_URL=https://dart-pub.mirrors.sjtug.sjtu.edu.cn</span><br><span class="line"><span class="built_in">export</span> FLUTTER_STORAGE_BASE_URL=https://mirrors.sjtug.sjtu.edu.cn</span><br><span class="line">flutter doctor</span><br></pre></td></tr></table></figure><p>之后按照提示修复即可<br>ps: cocoa太慢的话看<a href="http://www.cnblogs.com/zhuyanboyue/p/6118950.html" target="_blank" rel="noopener">这个</a></p><h3 id="杀进程"><a href="#杀进程" class="headerlink" title="杀进程"></a>杀进程</h3><p><code>ps aux|grep flutter|awk &#39;{print $2}&#39;|xargs kill -9</code></p><h3 id="各种问题解决"><a href="#各种问题解决" class="headerlink" title="各种问题解决"></a>各种问题解决</h3><p><a href="https://www.itfanr.cc/2019/03/08/flutter-devemopment-environment-configuration/" target="_blank" rel="noopener">url</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;RN2Flutter&quot;&gt;&lt;a href=&quot;#RN2Flutter&quot; class=&quot;headerlink&quot; title=&quot;RN2Flutter&quot;&gt;&lt;/a&gt;RN2Flutter&lt;/h1&gt;&lt;h2 id=&quot;Flutter环境安装&quot;&gt;&lt;a href=&quot;#Flutter环境安
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>webpack正确的引入pdf.js</title>
    <link href="https://www.mizuka.top/2019/10/18/webpack%E6%AD%A3%E7%A1%AE%E7%9A%84%E5%BC%95%E5%85%A5pdfjs/"/>
    <id>https://www.mizuka.top/2019/10/18/webpack正确的引入pdfjs/</id>
    <published>2019-10-18T07:55:16.111Z</published>
    <updated>2019-10-18T07:55:16.111Z</updated>
    
    <content type="html"><![CDATA[<h1 id="pdf-js"><a href="#pdf-js" class="headerlink" title="pdf.js"></a>pdf.js</h1><p>废话不多说,直接上代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pdfjs <span class="keyword">from</span> <span class="string">'pdfjs-dist/webpack'</span></span><br></pre></td></tr></table></figure><p>简单明了，不用考虑 pdf.worker.js,不用考虑 cdn</p><h2 id="附上最近做的-pdf-生成和导出的两个库的基础配置"><a href="#附上最近做的-pdf-生成和导出的两个库的基础配置" class="headerlink" title="附上最近做的 pdf 生成和导出的两个库的基础配置"></a>附上最近做的 pdf 生成和导出的两个库的基础配置</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pdfMake <span class="keyword">from</span> <span class="string">'pdfmake-support-chinese-fonts/pdfmake.min'</span></span><br><span class="line"><span class="keyword">import</span> pdfFonts <span class="keyword">from</span> <span class="string">'pdfmake-support-chinese-fonts/vfs_fonts'</span></span><br><span class="line"><span class="keyword">import</span> pdfjs <span class="keyword">from</span> <span class="string">'pdfjs-dist/webpack'</span></span><br><span class="line">pdfMake.vfs = pdfFonts.pdfMake.vfs</span><br><span class="line">pdfMake.fonts = &#123;</span><br><span class="line">  Roboto: &#123;</span><br><span class="line">    normal: <span class="string">'Roboto-Regular.ttf'</span>,</span><br><span class="line">    bold: <span class="string">'Roboto-Regular.ttf'</span>,</span><br><span class="line">    italics: <span class="string">'Roboto-Regular.ttf'</span>,</span><br><span class="line">    bolditalics: <span class="string">'Roboto-Regular.ttf'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  fangzhen: &#123;</span><br><span class="line">    normal: <span class="string">'fzhei-jt.TTF'</span>,</span><br><span class="line">    bold: <span class="string">'fzhei-jt.TTF'</span>,</span><br><span class="line">    italics: <span class="string">'fzhei-jt.TTF'</span>,</span><br><span class="line">    bolditalics: <span class="string">'fzhei-jt.TTF'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> pdfMaker = pdfMake</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> pdfViewer = pdfjs</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;pdf-js&quot;&gt;&lt;a href=&quot;#pdf-js&quot; class=&quot;headerlink&quot; title=&quot;pdf.js&quot;&gt;&lt;/a&gt;pdf.js&lt;/h1&gt;&lt;p&gt;废话不多说,直接上代码&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;
      
    
    </summary>
    
      <category term="开发的捷径" scheme="https://www.mizuka.top/categories/%E5%BC%80%E5%8F%91%E7%9A%84%E6%8D%B7%E5%BE%84/"/>
    
    
      <category term="vscode" scheme="https://www.mizuka.top/tags/vscode/"/>
    
      <category term="笔记" scheme="https://www.mizuka.top/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="学习" scheme="https://www.mizuka.top/tags/%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="记录" scheme="https://www.mizuka.top/tags/%E8%AE%B0%E5%BD%95/"/>
    
  </entry>
  
  <entry>
    <title>react-route4实现prompt自定义样式</title>
    <link href="https://www.mizuka.top/2019/10/11/react-route4%E5%AE%9E%E7%8E%B0prompt%E8%87%AA%E5%AE%9A%E4%B9%89%E6%A0%B7%E5%BC%8F/"/>
    <id>https://www.mizuka.top/2019/10/11/react-route4实现prompt自定义样式/</id>
    <published>2019-10-11T22:11:57.000Z</published>
    <updated>2019-10-18T07:55:16.111Z</updated>
    
    <content type="html"><![CDATA[<h1 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h1><p>项目中需要对正在编辑的页面做监测是否退出页面，退出则弹出提示，本身使用了 react-route，无奈 ui 不满足自定义的样式（嫌丑）所以通过自定义方案，做了一个新的版本</p><p>当然还是通过<a href="https://medium.com/@michaelchan_13570/using-react-router-v4-prompt-with-custom-modal-component-ca839f5faf39" target="_blank" rel="noopener">https://medium.com/@michaelchan_13570/using-react-router-v4-prompt-with-custom-modal-component-ca839f5faf39</a>来实现的</p><h2 id="ant-design-的代码"><a href="#ant-design-的代码" class="headerlink" title="ant-design 的代码"></a>ant-design 的代码</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">"react"</span>;</span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> H <span class="keyword">from</span> <span class="string">"history"</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Modal, Icon, Button &#125; <span class="keyword">from</span> <span class="string">"antd"</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Prompt &#125; <span class="keyword">from</span> <span class="string">"react-router-dom"</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; withRouter, RouteComponentProps &#125; <span class="keyword">from</span> <span class="string">"react-router"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">interface</span> PromptProps <span class="keyword">extends</span> RouteComponentProps &#123;</span><br><span class="line">  message: <span class="built_in">string</span> | <span class="function">(<span class="params">(<span class="params">location: H.Location</span>) =&gt; <span class="built_in">string</span> | <span class="built_in">boolean</span></span>);</span></span><br><span class="line"><span class="function">  <span class="params">when</span>?: <span class="params">boolean</span>;</span></span><br><span class="line"><span class="function">&#125;</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="params">export</span> <span class="params">class</span> <span class="params">RouteLeavingGuard</span> <span class="params">extends</span> <span class="params">React</span>.<span class="params">Component</span>&lt;</span></span><br><span class="line"><span class="function">  <span class="params">PromptProps</span>,</span></span><br><span class="line"><span class="function">  &#123;</span></span><br><span class="line"><span class="function">    <span class="params">modalVisible</span>: <span class="params">boolean</span>;</span></span><br><span class="line"><span class="function">    <span class="params">lastLocation</span>: <span class="params">H</span>.<span class="params">Location</span> | <span class="params">null</span>;</span></span><br><span class="line"><span class="function">    <span class="params">confirmedNavigation</span>: <span class="params">boolean</span>;</span></span><br><span class="line"><span class="function">  &#125;</span></span><br><span class="line"><span class="function">&gt; &#123;</span></span><br><span class="line"><span class="function">  <span class="params">constructor</span>(<span class="params">props: PromptProps</span>) &#123;</span></span><br><span class="line"><span class="function">    <span class="params">super</span>(<span class="params">props</span>);</span></span><br><span class="line"><span class="function">    <span class="params">this</span>.<span class="params">state</span> = &#123;</span></span><br><span class="line"><span class="function">      <span class="params">modalVisible</span>: <span class="params">false</span>,</span></span><br><span class="line"><span class="function">      <span class="params">lastLocation</span>: <span class="params">null</span>,</span></span><br><span class="line"><span class="function">      <span class="params">confirmedNavigation</span>: <span class="params">false</span></span></span><br><span class="line"><span class="function">    &#125;;</span></span><br><span class="line"><span class="function">  &#125;</span></span><br><span class="line"><span class="function">  <span class="params">showModal</span> = (<span class="params">location: H.Location</span>) =&gt;</span></span><br><span class="line">    <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">      modalVisible: <span class="literal">true</span>,</span><br><span class="line">      lastLocation: location</span><br><span class="line">    &#125;);</span><br><span class="line">  closeModal = <span class="function">(<span class="params">callback?: (<span class="params"></span>) =&gt; <span class="built_in">void</span></span>) =&gt;</span></span><br><span class="line">    <span class="keyword">this</span>.setState(</span><br><span class="line">      &#123;</span><br><span class="line">        modalVisible: <span class="literal">false</span></span><br><span class="line">      &#125;,</span><br><span class="line">      callback</span><br><span class="line">    );</span><br><span class="line">  handleBlockedNavigation = <span class="function">(<span class="params">nextLocation: H.Location</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; confirmedNavigation &#125; = <span class="keyword">this</span>.state;</span><br><span class="line">    <span class="keyword">if</span> (!confirmedNavigation) &#123;</span><br><span class="line">      <span class="keyword">this</span>.showModal(nextLocation);</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  handleConfirmNavigationClick = <span class="function"><span class="params">()</span> =&gt;</span></span><br><span class="line">    <span class="keyword">this</span>.closeModal(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> &#123; lastLocation &#125; = <span class="keyword">this</span>.state;</span><br><span class="line">      <span class="keyword">const</span> &#123; history &#125; = <span class="keyword">this</span>.props;</span><br><span class="line">      <span class="keyword">if</span> (lastLocation) &#123;</span><br><span class="line">        <span class="keyword">this</span>.setState(</span><br><span class="line">          &#123;</span><br><span class="line">            confirmedNavigation: <span class="literal">true</span></span><br><span class="line">          &#125;,</span><br><span class="line">          () =&gt; &#123;</span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * 走跳转</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            history.push(lastLocation.pathname + lastLocation.search);</span><br><span class="line">          &#125;</span><br><span class="line">        );</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; when, message &#125; = <span class="keyword">this</span>.props;</span><br><span class="line">    <span class="keyword">const</span> &#123; modalVisible, lastLocation &#125; = <span class="keyword">this</span>.state;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;&gt;</span><br><span class="line">        &lt;Prompt when=&#123;when&#125; message=&#123;<span class="keyword">this</span>.handleBlockedNavigation&#125; /&gt;</span><br><span class="line">        &lt;Modal</span><br><span class="line">          visible=&#123;modalVisible&#125;</span><br><span class="line">          okText=<span class="string">"确定"</span></span><br><span class="line">          closable=&#123;<span class="literal">false</span>&#125;</span><br><span class="line">          maskClosable=&#123;<span class="literal">false</span>&#125;</span><br><span class="line">          keyboard=&#123;<span class="literal">false</span>&#125;</span><br><span class="line">          footer=&#123;<span class="literal">null</span>&#125;</span><br><span class="line">          cancelText=<span class="string">"取消"</span></span><br><span class="line">          width=&#123;<span class="number">420</span>&#125;</span><br><span class="line">          onCancel=&#123;<span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">this</span>.closeModal()&#125;</span><br><span class="line">          onOk=&#123;<span class="keyword">this</span>.handleConfirmNavigationClick&#125;</span><br><span class="line">        &gt;</span><br><span class="line">          &#123;<span class="keyword">typeof</span> message === <span class="string">"function"</span> ? (</span><br><span class="line">            lastLocation &amp;&amp; message(lastLocation)</span><br><span class="line">          ) : (</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">              &lt;Icon</span><br><span class="line">                style=&#123;&#123;</span><br><span class="line">                  marginLeft: <span class="number">8</span>,</span><br><span class="line">                  marginRight: <span class="number">16</span>,</span><br><span class="line">                  fontSize: <span class="number">20</span>,</span><br><span class="line">                  position: <span class="string">"relative"</span>,</span><br><span class="line">                  top: <span class="number">2</span></span><br><span class="line">                &#125;&#125;</span><br><span class="line">                <span class="keyword">type</span>=<span class="string">"question-circle"</span></span><br><span class="line">                theme=<span class="string">"twoTone"</span></span><br><span class="line">                twoToneColor=&#123;<span class="string">"#faad14"</span>&#125;</span><br><span class="line">              /&gt;</span><br><span class="line">              &#123;message&#125;</span><br><span class="line">              &lt;div style=&#123;&#123; textAlign: <span class="string">"center"</span>, marginTop: <span class="number">24</span> &#125;&#125;&gt;</span><br><span class="line">                &lt;Button</span><br><span class="line">                  style=&#123;&#123; marginRight: <span class="number">16</span> &#125;&#125;</span><br><span class="line">                  <span class="keyword">type</span>=&#123;<span class="string">"primary"</span>&#125;</span><br><span class="line">                  onClick=&#123;<span class="keyword">this</span>.handleConfirmNavigationClick&#125;</span><br><span class="line">                &gt;</span><br><span class="line">                  确定</span><br><span class="line">                &lt;<span class="regexp">/Button&gt;</span></span><br><span class="line"><span class="regexp">                &lt;Button onClick=&#123;() =&gt; this.closeModal()&#125;&gt;取消&lt;/</span>Button&gt;</span><br><span class="line">              &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">            &lt;/</span>div&gt;</span><br><span class="line">          )&#125;</span><br><span class="line">        &lt;<span class="regexp">/Modal&gt;</span></span><br><span class="line"><span class="regexp">      &lt;/</span>&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> withRouter(RouteLeavingGuard);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;原因&quot;&gt;&lt;a href=&quot;#原因&quot; class=&quot;headerlink&quot; title=&quot;原因&quot;&gt;&lt;/a&gt;原因&lt;/h1&gt;&lt;p&gt;项目中需要对正在编辑的页面做监测是否退出页面，退出则弹出提示，本身使用了 react-route，无奈 ui 不满足自定义的样式（嫌丑）所以
      
    
    </summary>
    
      <category term="可以公开的情报" scheme="https://www.mizuka.top/categories/%E5%8F%AF%E4%BB%A5%E5%85%AC%E5%BC%80%E7%9A%84%E6%83%85%E6%8A%A5/"/>
    
    
      <category term="前端" scheme="https://www.mizuka.top/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="css" scheme="https://www.mizuka.top/tags/css/"/>
    
      <category term="js" scheme="https://www.mizuka.top/tags/js/"/>
    
      <category term="react" scheme="https://www.mizuka.top/tags/react/"/>
    
      <category term="react-route" scheme="https://www.mizuka.top/tags/react-route/"/>
    
      <category term="prompt" scheme="https://www.mizuka.top/tags/prompt/"/>
    
      <category term="退出校验" scheme="https://www.mizuka.top/tags/%E9%80%80%E5%87%BA%E6%A0%A1%E9%AA%8C/"/>
    
  </entry>
  
  <entry>
    <title>自动给表格空单元格补上字符串</title>
    <link href="https://www.mizuka.top/2019/09/23/%E8%87%AA%E5%8A%A8%E7%BB%99%E8%A1%A8%E6%A0%BC%E7%A9%BA%E5%8D%95%E5%85%83%E6%A0%BC%E8%A1%A5%E4%B8%8A%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    <id>https://www.mizuka.top/2019/09/23/自动给表格空单元格补上字符串/</id>
    <published>2019-09-23T09:11:57.000Z</published>
    <updated>2019-10-18T07:55:16.115Z</updated>
    
    <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>ui 设计中，如果单元格内部为空的话，需要填充一个默认字符串标明是个空格子，本身计划使用 js 来做的，但是考虑到要需要遍历，判断等等一系列操作，而且 js 里 <code>0</code> 做 boolean 判断也是返回 false，无形中增加了判断的步骤，所以这个时候还是求助于万能的 css 吧</p><p>以下为 less 代码</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">td</span>:empty &#123;</span><br><span class="line">  &amp;::after &#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">"-"</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h1&gt;&lt;p&gt;ui 设计中，如果单元格内部为空的话，需要填充一个默认字符串标明是个空格子，本身计划使用 js 来做的，但是考虑到要需要遍历，判断等等一系列
      
    
    </summary>
    
      <category term="可以公开的情报" scheme="https://www.mizuka.top/categories/%E5%8F%AF%E4%BB%A5%E5%85%AC%E5%BC%80%E7%9A%84%E6%83%85%E6%8A%A5/"/>
    
    
      <category term="前端" scheme="https://www.mizuka.top/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="css" scheme="https://www.mizuka.top/tags/css/"/>
    
      <category term="表格" scheme="https://www.mizuka.top/tags/%E8%A1%A8%E6%A0%BC/"/>
    
      <category term="单元格" scheme="https://www.mizuka.top/tags/%E5%8D%95%E5%85%83%E6%A0%BC/"/>
    
      <category term="补全" scheme="https://www.mizuka.top/tags/%E8%A1%A5%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>纯css实现table表头吸顶</title>
    <link href="https://www.mizuka.top/2019/09/09/%E7%BA%AFcss%E5%AE%9E%E7%8E%B0table%E8%A1%A8%E5%A4%B4%E5%90%B8%E9%A1%B6/"/>
    <id>https://www.mizuka.top/2019/09/09/纯css实现table表头吸顶/</id>
    <published>2019-09-09T12:11:57.000Z</published>
    <updated>2019-10-18T07:55:16.115Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Position-Sticky-与表格头"><a href="#Position-Sticky-与表格头" class="headerlink" title="Position Sticky 与表格头"></a>Position Sticky 与表格头</h1><blockquote><p>原文章<a href="https://css-tricks.com/position-sticky-and-table-headers/" target="_blank" rel="noopener">https://css-tricks.com/position-sticky-and-table-headers/</a>. 本身产品有个需求需要表格自动吸顶，本身用了 antd design 的 scroll 实现的，现在使用 css 实现，效果更好</p></blockquote><p><code>thead</code>和<code>tr</code>上无法设置 style<code>position: sticky;</code>,<br>到那时在<code>th</code>上却可以，这也意味着，其实你可以在一个传统的<code>table</code>上实现吸顶 header 效果，如果你不清楚吸顶实现的原理，大概实现起来会很棘手吧，使用 css 总比原先用 js 去监听事件然后改变<code>position</code>好得多</p><h2 id="兼容性"><a href="#兼容性" class="headerlink" title="兼容性"></a>兼容性</h2><p><a href="https://caniuse.com/#search=sticky" target="_blank" rel="noopener">查看兼容性</a><br>只要不是 ie 这种活化石，基本都已经支持了</p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><ol><li>保证 table 的 position 为 relative</li><li>给每个 th 加上 sticky</li></ol><h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.stickyTable</span> &#123;</span><br><span class="line">  <span class="selector-pseudo">:global(table)</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="selector-pseudo">:global(th)</span> &#123;</span><br><span class="line">      <span class="attribute">position</span>: sticky;</span><br><span class="line">      <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">      <span class="attribute">z-index</span>: <span class="number">9999</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Position-Sticky-与表格头&quot;&gt;&lt;a href=&quot;#Position-Sticky-与表格头&quot; class=&quot;headerlink&quot; title=&quot;Position Sticky 与表格头&quot;&gt;&lt;/a&gt;Position Sticky 与表格头&lt;/h1&gt;&lt;
      
    
    </summary>
    
      <category term="可以公开的情报" scheme="https://www.mizuka.top/categories/%E5%8F%AF%E4%BB%A5%E5%85%AC%E5%BC%80%E7%9A%84%E6%83%85%E6%8A%A5/"/>
    
    
      <category term="前端" scheme="https://www.mizuka.top/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="css" scheme="https://www.mizuka.top/tags/css/"/>
    
      <category term="表格" scheme="https://www.mizuka.top/tags/%E8%A1%A8%E6%A0%BC/"/>
    
      <category term="吸顶" scheme="https://www.mizuka.top/tags/%E5%90%B8%E9%A1%B6/"/>
    
      <category term="sticky" scheme="https://www.mizuka.top/tags/sticky/"/>
    
  </entry>
  
  <entry>
    <title>axios兜底错误处理</title>
    <link href="https://www.mizuka.top/2019/09/04/axios%E5%85%9C%E5%BA%95%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86/"/>
    <id>https://www.mizuka.top/2019/09/04/axios兜底错误处理/</id>
    <published>2019-09-04T18:11:57.000Z</published>
    <updated>2019-10-18T07:55:16.111Z</updated>
    
    <content type="html"><![CDATA[<h1 id="axios的兜底报错"><a href="#axios的兜底报错" class="headerlink" title="axios的兜底报错"></a>axios的兜底报错</h1><p>项目的网络请求层使用了axios，axios是一个及其好用的库，但是在业务使用上出现了一些问题</p><h2 id="出现原因"><a href="#出现原因" class="headerlink" title="出现原因"></a>出现原因</h2><p>众所周知，前端一般通过ajax向后端请求数据然后处理后显示在网页/app上，当然人都是懒得，总是希望有一些自动完成的事，比如这一次，如果不是需要特殊处理的特定错误，直接弹toast结束。</p><p>错误处理还是很容易，axios增加拦截器，如果是指定的错误，直接<figure class="highlight plain"><figcaption><span>new Error('错误')``` 剩下的交给```promise.catch```干就好了，问题集中在如何兜底这个catch，如果不处理，会变成```unhandledrejection```错误</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">### 解决方案</span><br><span class="line">#### 最原始的方案</span><br><span class="line">高阶函数 throwMessage，自动在promise之后增加catch函数，问题是这个要记得手动引入，和自动这个理念还是有点区别的.  </span><br><span class="line"></span><br><span class="line">```javascript</span><br><span class="line"></span><br><span class="line">export function throwMessage&lt;T = any&gt;(responsePromise: Promise&lt;T&gt;) &#123;</span><br><span class="line">  return responsePromise.catch((e: Error) =&gt; &#123;</span><br><span class="line">    console.error(`error`, e)</span><br><span class="line">    message.error(e.message)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>每次使用都要<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">#### webpack方案</span><br><span class="line">既然打包的是webpack，那么使用webpack在转译原始代码的时候注入就好了嘛. 推荐一个[promise-catch-loader](https://github.com/xuqiang521/promise-catch-loader)自动处理好这一系列问题 具体因为没有太研究，不做展开</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#### 事件监听方案</span><br><span class="line">上文提到了，如果promise没有捕获错误，会自动变成unhandlered rejection错误，这个是可以全局监听的，具体[在MDN上可以看](https://developer.mozilla.org/zh-CN/docs/Web/Events/unhandledrejection)</span><br><span class="line"></span><br><span class="line">那么 我们在window上直接监听就好了</span><br><span class="line"></span><br><span class="line">```javascript</span><br><span class="line">window.addEventListener(&apos;unhandledrejection&apos;, event =&gt; &#123;</span><br><span class="line">  event.preventDefault()</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>问题是，太全局了</p><h4 id="处理Promise链方案"><a href="#处理Promise链方案" class="headerlink" title="处理Promise链方案"></a>处理Promise链方案</h4><p>这种是最终处理的方案，当然也是最魔改的方案，考虑到<strong>只运行在前端，内存溢出情况不多</strong>，方能实现</p><p>axios返回的是promise，promise是遵循PromiseA+方案，内部其实是有一条promise链的，我们的目的就在于，在promise链条的<strong>最后一个promise</strong>上挂上catch,反正预先被处理了最后一个也不会触发</p><h5 id="问题来了"><a href="#问题来了" class="headerlink" title="问题来了"></a>问题来了</h5><p>如果你直接看promise的话，是只能看到，then，catch，finally这些方法的，并没办法看到promise链，也没办法顺着链访问到最后</p><h5 id="如何解决"><a href="#如何解决" class="headerlink" title="如何解决"></a>如何解决</h5><p>我们的目标是将其变为链式结构，简单来说，只要每个then和catch都能记下他的后继即可。<br>所以最终我选择注入promise的两个方法</p><h5 id="实现代码"><a href="#实现代码" class="headerlink" title="实现代码"></a>实现代码</h5><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 继承然后注入两个方法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> ChainedPromise&lt;T&gt; <span class="keyword">extends</span> <span class="built_in">Promise</span>&lt;T&gt; &#123;</span><br><span class="line">  nextPromise?: <span class="built_in">Promise</span>&lt;<span class="built_in">any</span>&gt;</span><br><span class="line"></span><br><span class="line">  then&lt;TResult1 = T, TResult2 = never&gt;(</span><br><span class="line">    onfulfilled?: <span class="function">(<span class="params">(<span class="params">value: T</span>) =&gt; TResult1 | PromiseLike&lt;TResult1&gt;</span>) | <span class="params">undefined</span> | <span class="params">null</span>,</span></span><br><span class="line"><span class="function">    <span class="params">onrejected</span>?: (<span class="params">(<span class="params">reason: <span class="built_in">any</span></span>) =&gt; TResult2 | PromiseLike&lt;TResult2&gt;</span>) | <span class="params">undefined</span> | <span class="params">null</span>,</span></span><br><span class="line"><span class="function">  ): <span class="params">Promise</span>&lt;<span class="params">TResult1</span> | <span class="params">TResult2</span>&gt; &#123;</span></span><br><span class="line"><span class="function">    <span class="params">const</span> <span class="params">promise</span> = <span class="params">super</span>.<span class="params">then</span>(<span class="params">onfulfilled, onrejected</span>)</span></span><br><span class="line"><span class="function">    <span class="params">this</span>.<span class="params">nextPromise</span> = <span class="params">promise</span></span></span><br><span class="line"><span class="function">    <span class="params">return</span> <span class="params">promise</span></span></span><br><span class="line"><span class="function">  &#125;</span></span><br><span class="line"><span class="function">  <span class="params">catch</span>&lt;<span class="params">TResult</span> = <span class="params">never</span>&gt;(<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">    onrejected?: (<span class="params">(<span class="params">reason: <span class="built_in">any</span></span>) =&gt; TResult | PromiseLike&lt;TResult&gt;</span>) | <span class="literal">undefined</span> | <span class="literal">null</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">  </span>): <span class="params">Promise</span>&lt;<span class="params">T</span> | <span class="params">TResult</span>&gt; &#123;</span></span><br><span class="line"><span class="function">    <span class="params">const</span> <span class="params">promise</span> = <span class="params">super</span>.<span class="params">catch</span>(<span class="params">onrejected</span>)</span></span><br><span class="line"><span class="function">    <span class="params">this</span>.<span class="params">nextPromise</span> = <span class="params">promise</span></span></span><br><span class="line"><span class="function">    <span class="params">return</span> <span class="params">promise</span></span></span><br><span class="line"><span class="function">  &#125;</span></span><br><span class="line"><span class="function">&#125;</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">/**</span></span><br><span class="line"><span class="function"> * 暴露给外面的方法，<span class="params">axios</span>通过拦截器，通过封装<span class="params">service</span>都能调用它来在入口处自动注入</span></span><br><span class="line"><span class="function"> */</span></span><br><span class="line"><span class="function"><span class="params">function</span> <span class="params">autoTravel</span>&lt;<span class="params">T</span>&gt;(<span class="params">promise: <span class="built_in">Promise</span>&lt;T&gt;</span>): <span class="params">Promise</span>&lt;<span class="params">T</span>&gt; &#123;</span></span><br><span class="line"><span class="function">  <span class="params">const</span> <span class="params">getLastPromise</span> = <span class="params">function</span>(<span class="params">promise: ChainedPromise&lt;<span class="built_in">any</span>&gt;</span>): <span class="params">Promise</span>&lt;<span class="params">any</span>&gt; &#123;</span></span><br><span class="line"><span class="function">    <span class="params">if</span> (<span class="params">promise.nextPromise</span>) &#123;</span></span><br><span class="line"><span class="function">      <span class="params">return</span> <span class="params">getLastPromise</span>(<span class="params">promise.nextPromise</span>)</span></span><br><span class="line"><span class="function">    &#125;</span></span><br><span class="line"><span class="function">    <span class="params">return</span> <span class="params">promise</span></span></span><br><span class="line"><span class="function">  &#125;</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">  /**</span></span><br><span class="line"><span class="function">   * <span class="params">Promise</span>内部的自动形成链条，就能顺着链条找到最后一个了</span></span><br><span class="line"><span class="function">   */</span></span><br><span class="line"><span class="function">  <span class="params">const</span> <span class="params">autoTravelPromise</span> = <span class="params">new</span> <span class="params">ChainedPromise</span>&lt;<span class="params">T</span>&gt;(<span class="params">(<span class="params">resolve, reject</span>) =&gt; &#123;</span></span></span><br><span class="line"><span class="function"><span class="params">    promise.then(<span class="params">resolve</span>).<span class="keyword">catch</span>(<span class="params">responseError =&gt; &#123;</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="params">    <span class="comment">// throwMessage为之前定义的，promise上自动加catch的方法</span></span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="params">      throwMessage(<span class="params">getLastPromise(<span class="params">autoTravelPromise</span>)</span>)</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="params">      reject(<span class="params">responseError</span>)</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="params">    &#125;</span>)</span></span></span><br><span class="line"><span class="function"><span class="params">  &#125;</span>)</span></span><br><span class="line"><span class="function">  <span class="params">return</span> <span class="params">autoTravelPromise</span></span></span><br><span class="line"><span class="function">&#125;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;axios的兜底报错&quot;&gt;&lt;a href=&quot;#axios的兜底报错&quot; class=&quot;headerlink&quot; title=&quot;axios的兜底报错&quot;&gt;&lt;/a&gt;axios的兜底报错&lt;/h1&gt;&lt;p&gt;项目的网络请求层使用了axios，axios是一个及其好用的库，但是在业务使
      
    
    </summary>
    
      <category term="可以公开的情报" scheme="https://www.mizuka.top/categories/%E5%8F%AF%E4%BB%A5%E5%85%AC%E5%BC%80%E7%9A%84%E6%83%85%E6%8A%A5/"/>
    
    
      <category term="前端" scheme="https://www.mizuka.top/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="经验" scheme="https://www.mizuka.top/tags/%E7%BB%8F%E9%AA%8C/"/>
    
      <category term="axios" scheme="https://www.mizuka.top/tags/axios/"/>
    
      <category term="promise" scheme="https://www.mizuka.top/tags/promise/"/>
    
      <category term="错误处理" scheme="https://www.mizuka.top/tags/%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>vscode在debugger的时候如何加载插件</title>
    <link href="https://www.mizuka.top/2019/08/15/vscode%E5%9C%A8debugger%E7%9A%84%E6%97%B6%E5%80%99%E5%A6%82%E4%BD%95%E5%8A%A0%E8%BD%BD%E6%8F%92%E4%BB%B6/"/>
    <id>https://www.mizuka.top/2019/08/15/vscode在debugger的时候如何加载插件/</id>
    <published>2019-08-15T15:32:01.000Z</published>
    <updated>2019-10-18T07:55:16.111Z</updated>
    
    <content type="html"><![CDATA[<h1 id="最终的-launch-js-配置"><a href="#最终的-launch-js-配置" class="headerlink" title="最终的 launch.js 配置"></a>最终的 launch.js 配置</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  // 使用 IntelliSense 了解相关属性。</span><br><span class="line">  // 悬停以查看现有属性的描述。</span><br><span class="line">  // 欲了解更多信息，请访问: https://go.microsoft.com/fwlink/?linkid=830387</span><br><span class="line">  &quot;version&quot;: &quot;0.2.0&quot;,</span><br><span class="line">  &quot;configurations&quot;: [</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;type&quot;: &quot;chrome&quot;,</span><br><span class="line">      &quot;request&quot;: &quot;launch&quot;,</span><br><span class="line">      &quot;name&quot;: &quot;Launch Chrome against localhost&quot;,</span><br><span class="line">      &quot;url&quot;: &quot;http://localhost:8081&quot;,</span><br><span class="line">      &quot;webRoot&quot;: &quot;$&#123;workspaceFolder&#125;&quot;,</span><br><span class="line">      &quot;runtimeArgs&quot;: [</span><br><span class="line">        &quot;--load-extension=~/Library/Application Support/Google/Chrome/Default/Extensions/fmkadmapgofadopljbjfkapdkoienihi/3.6.0_0&quot;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;最终的-launch-js-配置&quot;&gt;&lt;a href=&quot;#最终的-launch-js-配置&quot; class=&quot;headerlink&quot; title=&quot;最终的 launch.js 配置&quot;&gt;&lt;/a&gt;最终的 launch.js 配置&lt;/h1&gt;&lt;figure class=&quot;hi
      
    
    </summary>
    
      <category term="可以公开的情报" scheme="https://www.mizuka.top/categories/%E5%8F%AF%E4%BB%A5%E5%85%AC%E5%BC%80%E7%9A%84%E6%83%85%E6%8A%A5/"/>
    
    
      <category term="vscode" scheme="https://www.mizuka.top/tags/vscode/"/>
    
      <category term="chrome" scheme="https://www.mizuka.top/tags/chrome/"/>
    
  </entry>
  
  <entry>
    <title>umi.js约定式路由如何生成breadcrumbs</title>
    <link href="https://www.mizuka.top/2019/08/15/umi.js%E7%BA%A6%E5%AE%9A%E5%BC%8F%E8%B7%AF%E7%94%B1%E5%A6%82%E4%BD%95%E7%94%9F%E6%88%90breadcrumbs/"/>
    <id>https://www.mizuka.top/2019/08/15/umi.js约定式路由如何生成breadcrumbs/</id>
    <published>2019-08-15T10:32:01.000Z</published>
    <updated>2019-10-18T07:55:16.111Z</updated>
    
    <content type="html"><![CDATA[<h1 id="umi-js-约定式路由如何生成-breadcrumbs"><a href="#umi-js-约定式路由如何生成-breadcrumbs" class="headerlink" title="umi.js 约定式路由如何生成 breadcrumbs"></a>umi.js 约定式路由如何生成 breadcrumbs</h1><p>umi，中文可发音为乌米，是一个可插拔的企业级 react 应用框架。umi 以路由为基础的，支持类 next.js 的约定式路由</p><h2 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h2><p>因为比较喜欢约定式路由，看目录结构很清晰，所以整个项目都是使用了约定式的路由结构，相对的，umi 会在 pages 下自动建立自己的 router 问题，将路由配置管理在里面<br>但是到了建立自动的面包屑的时候却遇到了问题，没办法初始化</p><h3 id="官方的方法"><a href="#官方的方法" class="headerlink" title="官方的方法"></a>官方的方法</h3><p><a href="https://umijs.org/zh/guide/router.html#%E9%9D%A2%E5%8C%85%E5%B1%91" target="_blank" rel="noopener">https://umijs.org/zh/guide/router.html#%E9%9D%A2%E5%8C%85%E5%B1%91</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> NavLink <span class="keyword">from</span> <span class="string">"umi/navlink"</span>;</span><br><span class="line"><span class="keyword">import</span> withBreadcrumbs <span class="keyword">from</span> <span class="string">"react-router-breadcrumbs-hoc"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 更多配置请移步 https://github.com/icd2k3/react-router-breadcrumbs-hoc</span></span><br><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  &#123; <span class="attr">path</span>: <span class="string">"/"</span>, <span class="attr">breadcrumb</span>: <span class="string">"首页"</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">path</span>: <span class="string">"/list"</span>, <span class="attr">breadcrumb</span>: <span class="string">"List Page"</span> &#125;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> withBreadcrumbs(routes)(<span class="function">(<span class="params">&#123; breadcrumbs &#125;</span>) =&gt;</span> (</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &#123;breadcrumbs.map(<span class="function">(<span class="params">breadcrumb, index</span>) =&gt;</span> (</span><br><span class="line">      &lt;span key=&#123;breadcrumb.key&#125;&gt;</span><br><span class="line">        &lt;NavLink to=&#123;breadcrumb.props.match.url&#125;&gt;&#123;breadcrumb&#125;&lt;<span class="regexp">/NavLink&gt;</span></span><br><span class="line"><span class="regexp">        &#123;index &lt; breadcrumbs.length - 1 &amp;&amp; &lt;i&gt; /</span> &lt;<span class="regexp">/i&gt;&#125;</span></span><br><span class="line"><span class="regexp">      &lt;/</span>span&gt;</span><br><span class="line">    ))&#125;</span><br><span class="line">  &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">));</span></span><br></pre></td></tr></table></figure><h3 id="实际的问题"><a href="#实际的问题" class="headerlink" title="实际的问题"></a>实际的问题</h3><p>routes 并不是自己配置的所以没办法传入，google 全网也没提到如何解决，于是实际问题变成了如何获取 routes</p><h4 id="解决方案-1"><a href="#解决方案-1" class="headerlink" title="解决方案 1"></a>解决方案 1</h4><p>既然<code>src/pages/.umi/router</code>这个文件已经存在了，直接引入，让 webpack 最终自动打包进去</p><p>实际上，因为用的 typescript，没办法直接引入 js 文件，最终失败</p><h4 id="解决方案-2"><a href="#解决方案-2" class="headerlink" title="解决方案 2"></a>解决方案 2</h4><p>手写</p><p>和用约定式路由的理念冲突了</p><h4 id="最终解决方案"><a href="#最终解决方案" class="headerlink" title="最终解决方案"></a>最终解决方案</h4><p>它既然缺 routes,umi 又会自动生成，那就直接直接挪出来用呗 umi 使用的路由插件提供了<a href="https://www.npmjs.com/package/umi-plugin-routes#optionupdate" target="_blank" rel="noopener">更新时回调功能</a> 借用这个，在订好的路径下将路由信息导出来就好了</p><h5 id="具体代码"><a href="#具体代码" class="headerlink" title="具体代码"></a>具体代码</h5><p>修改.umirc.js 中的 routes 为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">        routes: &#123;</span><br><span class="line">          exclude: [</span><br><span class="line">            /models\//,</span><br><span class="line">            /services\//,</span><br><span class="line">            /utils\//,</span><br><span class="line">            /model\.(t|j)sx?$/,</span><br><span class="line">            /service\.(t|j)sx?$/,</span><br><span class="line">            /utils\.(t|j)sx?$/,</span><br><span class="line">            /components\//,</span><br><span class="line">          ],</span><br><span class="line">          update(routes) &#123;</span><br><span class="line">            fs.writeFileSync(</span><br><span class="line">              &apos;./src/utils/routes.ts&apos;,</span><br><span class="line">              `/**</span><br><span class="line"> * 自动根据配置生成的路由文件，方便获取目录结构</span><br><span class="line"> */</span><br><span class="line">export default $&#123;JSON.stringify(routes[0].routes.filter(route =&gt; route.path), null, 2).replace(</span><br><span class="line">                /&quot;(\w+)&quot;:/g,</span><br><span class="line">                &apos;$1:&apos;,</span><br><span class="line">              )&#125;`,</span><br><span class="line">              &#123; flag: &apos;w&apos; &#125;,</span><br><span class="line">            )</span><br><span class="line">            return routes</span><br><span class="line">          &#125;,</span><br><span class="line">        &#125;,</span><br></pre></td></tr></table></figure><p>最终，breadcrumbs 就能实时获取路由信息了</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;umi-js-约定式路由如何生成-breadcrumbs&quot;&gt;&lt;a href=&quot;#umi-js-约定式路由如何生成-breadcrumbs&quot; class=&quot;headerlink&quot; title=&quot;umi.js 约定式路由如何生成 breadcrumbs&quot;&gt;&lt;/a&gt;um
      
    
    </summary>
    
      <category term="可以公开的情报" scheme="https://www.mizuka.top/categories/%E5%8F%AF%E4%BB%A5%E5%85%AC%E5%BC%80%E7%9A%84%E6%83%85%E6%8A%A5/"/>
    
    
      <category term="umi.js" scheme="https://www.mizuka.top/tags/umi-js/"/>
    
      <category term="面包屑" scheme="https://www.mizuka.top/tags/%E9%9D%A2%E5%8C%85%E5%B1%91/"/>
    
      <category term="路由" scheme="https://www.mizuka.top/tags/%E8%B7%AF%E7%94%B1/"/>
    
      <category term="约定式路由" scheme="https://www.mizuka.top/tags/%E7%BA%A6%E5%AE%9A%E5%BC%8F%E8%B7%AF%E7%94%B1/"/>
    
  </entry>
  
  <entry>
    <title>常用正则</title>
    <link href="https://www.mizuka.top/2019/07/12/%E6%AD%A3%E5%88%99/"/>
    <id>https://www.mizuka.top/2019/07/12/正则/</id>
    <published>2019-07-12T18:17:35.000Z</published>
    <updated>2019-10-18T07:55:16.115Z</updated>
    
    <content type="html"><![CDATA[<h1 id="正则大全"><a href="#正则大全" class="headerlink" title="正则大全   "></a>正则大全 <img src="https://img.shields.io/badge/状态-积极更新-673ab7.svg" alt=""> <img src="https://img.shields.io/badge/已收录-47条-4caf50.svg" alt=""> <img src="https://img.shields.io/badge/license-MIT-F44336.svg" alt=""></h1><p>:whale:图形界面: <a href="https://any86.github.io/any-rule/" target="_blank" rel="noopener">https://any86.github.io/any-rule/</a></p><h2 id="html-注释"><a href="#html-注释" class="headerlink" title="html 注释"></a>html 注释</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/<span class="xml"><span class="comment">&lt;!--(.*?)--&gt;</span>$/;</span></span><br></pre></td></tr></table></figure><h2 id="md5-格式-32-位"><a href="#md5-格式-32-位" class="headerlink" title="md5 格式(32 位)"></a>md5 格式(32 位)</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/^[a-f0<span class="number">-9</span>]&#123;<span class="number">32</span>&#125;$/;</span><br></pre></td></tr></table></figure><h2 id="版本号格式必须为-X-Y-Z"><a href="#版本号格式必须为-X-Y-Z" class="headerlink" title="版本号格式必须为 X.Y.Z"></a>版本号格式必须为 X.Y.Z</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/^\d+(\.\d+)&#123;<span class="number">2</span>&#125;$/;</span><br></pre></td></tr></table></figure><h2 id="视频链接地址（视频格式可按需增删）"><a href="#视频链接地址（视频格式可按需增删）" class="headerlink" title="视频链接地址（视频格式可按需增删）"></a>视频链接地址（视频格式可按需增删）</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/^https?:\/\/.*?(swf|avi|flv|mpg|rm|mov|wav|asf|<span class="number">3</span>gp|mkv|rmvb|mp4)$/i;</span><br></pre></td></tr></table></figure><h2 id="图片链接地址（图片格式可按需增删）"><a href="#图片链接地址（图片格式可按需增删）" class="headerlink" title="图片链接地址（图片格式可按需增删）"></a>图片链接地址（图片格式可按需增删）</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/^https?:\/\/.*?(gif|png|jpg|jpeg|webp|svg|psd|bmp|tif)$/i;</span><br></pre></td></tr></table></figure><h2 id="24-小时制时间（HH-mm-ss）"><a href="#24-小时制时间（HH-mm-ss）" class="headerlink" title="24 小时制时间（HH:mm:ss）"></a>24 小时制时间（HH:mm:ss）</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/^((?:[<span class="number">01</span>]\d|<span class="number">2</span>[<span class="number">0</span><span class="number">-3</span>]):[<span class="number">0</span><span class="number">-5</span>]\d:[<span class="number">0</span><span class="number">-5</span>]\d$)/;</span><br></pre></td></tr></table></figure><h2 id="12-小时制时间（hh-mm-ss）"><a href="#12-小时制时间（hh-mm-ss）" class="headerlink" title="12 小时制时间（hh:mm:ss）"></a>12 小时制时间（hh:mm:ss）</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/^(<span class="number">1</span>[<span class="number">0</span><span class="number">-2</span>]|<span class="number">0</span>?[<span class="number">1</span><span class="number">-9</span>]):[<span class="number">0</span><span class="number">-5</span>]\d:[<span class="number">0</span><span class="number">-5</span>]\d$/;</span><br></pre></td></tr></table></figure><h2 id="base64-格式"><a href="#base64-格式" class="headerlink" title="base64 格式"></a>base64 格式</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/^\s*data:([a-z]+\/[a-z0<span class="number">-9</span>-+.]+(;[a-z-]+=[a-z0<span class="number">-9</span>-]+)?)?(;base64)?,([a-z0<span class="number">-9</span>!$&amp;<span class="string">',()*+;=\-._~:@\/?%\s]*?)\s*$/i;</span></span><br></pre></td></tr></table></figure><h2 id="数字-货币金额（支持负数、千分位分隔符）"><a href="#数字-货币金额（支持负数、千分位分隔符）" class="headerlink" title="数字/货币金额（支持负数、千分位分隔符）"></a>数字/货币金额（支持负数、千分位分隔符）</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/(^[-]?[<span class="number">1</span><span class="number">-9</span>]\d&#123;<span class="number">0</span>,<span class="number">2</span>&#125;($|(,\d&#123;<span class="number">3</span>&#125;)*($|(\.\d&#123;<span class="number">1</span>,<span class="number">2</span>&#125;$))))|((^[<span class="number">0</span>](\.\d&#123;<span class="number">1</span>,<span class="number">2</span>&#125;)?)|(^[-][<span class="number">0</span>]\.\d&#123;<span class="number">1</span>,<span class="number">2</span>&#125;))$/;</span><br></pre></td></tr></table></figure><h2 id="数字-货币金额-只支持正数、不支持校验千分位分隔符"><a href="#数字-货币金额-只支持正数、不支持校验千分位分隔符" class="headerlink" title="数字/货币金额 (只支持正数、不支持校验千分位分隔符)"></a>数字/货币金额 (只支持正数、不支持校验千分位分隔符)</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/(^[<span class="number">1</span><span class="number">-9</span>]([<span class="number">0</span><span class="number">-9</span>]+)?(\.[<span class="number">0</span><span class="number">-9</span>]&#123;<span class="number">1</span>,<span class="number">2</span>&#125;)?$)|(^(<span class="number">0</span>)&#123;<span class="number">1</span>&#125;$)|(^[<span class="number">0</span><span class="number">-9</span>]\.[<span class="number">0</span><span class="number">-9</span>]([<span class="number">0</span><span class="number">-9</span>])?$)/;</span><br></pre></td></tr></table></figure><h2 id="银行卡号（16-或-19-位）"><a href="#银行卡号（16-或-19-位）" class="headerlink" title="银行卡号（16 或 19 位）"></a>银行卡号（16 或 19 位）</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/^([<span class="number">1</span><span class="number">-9</span>]&#123;<span class="number">1</span>&#125;)(\d&#123;<span class="number">15</span>&#125;|\d&#123;<span class="number">18</span>&#125;)$/;</span><br></pre></td></tr></table></figure><h2 id="中文姓名"><a href="#中文姓名" class="headerlink" title="中文姓名"></a>中文姓名</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/^([\u4e00-\u9fa5·]&#123;<span class="number">2</span>,<span class="number">16</span>&#125;)$/;</span><br></pre></td></tr></table></figure><h2 id="英文姓名"><a href="#英文姓名" class="headerlink" title="英文姓名"></a>英文姓名</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/(^[a-zA-Z]&#123;<span class="number">1</span>&#125;[a-zA-Z\s]&#123;<span class="number">0</span>,<span class="number">20</span>&#125;[a-zA-Z]&#123;<span class="number">1</span>&#125;$)/;</span><br></pre></td></tr></table></figure><h2 id="新能源车牌号"><a href="#新能源车牌号" class="headerlink" title="新能源车牌号"></a>新能源车牌号</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/[京津沪渝冀豫云辽黑湘皖鲁新苏浙赣鄂桂甘晋蒙陕吉闽贵粤青藏川宁琼使领 A-Z]&#123;<span class="number">1</span>&#125;[A-HJ-NP-Z]&#123;<span class="number">1</span>&#125;(([<span class="number">0</span><span class="number">-9</span>]&#123;<span class="number">5</span>&#125;[DF])|([DF][A-HJ-NP-Z0<span class="number">-9</span>][<span class="number">0</span><span class="number">-9</span>]&#123;<span class="number">4</span>&#125;))$/;</span><br></pre></td></tr></table></figure><h2 id="非新能源车牌号"><a href="#非新能源车牌号" class="headerlink" title="非新能源车牌号"></a>非新能源车牌号</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/^[京津沪渝冀豫云辽黑湘皖鲁新苏浙赣鄂桂甘晋蒙陕吉闽贵粤青藏川宁琼使领 A-Z]&#123;<span class="number">1</span>&#125;[A-HJ-NP-Z]&#123;<span class="number">1</span>&#125;[A-Z0<span class="number">-9</span>]&#123;<span class="number">4</span>&#125;[A-Z0<span class="number">-9</span>挂学警港澳]&#123;<span class="number">1</span>&#125;$/;</span><br></pre></td></tr></table></figure><h2 id="车牌号-新能源-非新能源"><a href="#车牌号-新能源-非新能源" class="headerlink" title="车牌号(新能源+非新能源)"></a>车牌号(新能源+非新能源)</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/^([京津沪渝冀豫云辽黑湘皖鲁新苏浙赣鄂桂甘晋蒙陕吉闽贵粤青藏川宁琼使领 A-Z]&#123;<span class="number">1</span>&#125;[A-HJ-NP-Z]&#123;<span class="number">1</span>&#125;(([<span class="number">0</span><span class="number">-9</span>]&#123;<span class="number">5</span>&#125;[DF])|([DF]([A-HJ-NP-Z0<span class="number">-9</span>])[<span class="number">0</span><span class="number">-9</span>]&#123;<span class="number">4</span>&#125;)))|([京津沪渝冀豫云辽黑湘皖鲁新苏浙赣鄂桂甘晋蒙陕吉闽贵粤青藏川宁琼使领 A-Z]&#123;<span class="number">1</span>&#125;[A-Z]&#123;<span class="number">1</span>&#125;[A-HJ-NP-Z0<span class="number">-9</span>]&#123;<span class="number">4</span>&#125;[A-HJ-NP-Z0<span class="number">-9</span> 挂学警港澳]&#123;<span class="number">1</span>&#125;)$/;</span><br></pre></td></tr></table></figure><h2 id="URL-链接-网址"><a href="#URL-链接-网址" class="headerlink" title="URL 链接(网址)"></a>URL 链接(网址)</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/^((https?|ftp|file):\/\/)?([\da-z.-]+)\.([a-z.]&#123;<span class="number">2</span>,<span class="number">6</span>&#125;)(\/\w\.-]*)*\/?<span class="regexp">/;</span></span><br></pre></td></tr></table></figure><h2 id="手机号-严谨-根据工信部-2019-年最新公布的手机号段"><a href="#手机号-严谨-根据工信部-2019-年最新公布的手机号段" class="headerlink" title="手机号(严谨), 根据工信部 2019 年最新公布的手机号段"></a>手机号(严谨), 根据工信部 2019 年最新公布的手机号段</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/^<span class="number">1</span>((<span class="number">3</span>[\d])|(<span class="number">4</span>[<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">9</span>])|(<span class="number">5</span>[<span class="number">0</span><span class="number">-3</span>,<span class="number">5</span><span class="number">-9</span>])|(<span class="number">6</span>[<span class="number">5</span><span class="number">-7</span>])|(<span class="number">7</span>[<span class="number">0</span><span class="number">-8</span>])|(<span class="number">8</span>[\d])|(<span class="number">9</span>[<span class="number">1</span>,<span class="number">8</span>,<span class="number">9</span>]))\d&#123;<span class="number">8</span>&#125;$/;</span><br></pre></td></tr></table></figure><h2 id="手机号-宽松-只要是-13-14-15-16-17-18-19-开头即可"><a href="#手机号-宽松-只要是-13-14-15-16-17-18-19-开头即可" class="headerlink" title="手机号(宽松), 只要是 13,14,15,16,17,18,19 开头即可"></a>手机号(宽松), 只要是 13,14,15,16,17,18,19 开头即可</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/^<span class="number">1</span>[<span class="number">3</span><span class="number">-9</span>]\d&#123;<span class="number">9</span>&#125;$/;</span><br></pre></td></tr></table></figure><h2 id="手机号-最宽松-只要是-1-开头即可-如果你的手机号是用来接收短信-优先建议选择这一条"><a href="#手机号-最宽松-只要是-1-开头即可-如果你的手机号是用来接收短信-优先建议选择这一条" class="headerlink" title="手机号(最宽松), 只要是 1 开头即可, 如果你的手机号是用来接收短信, 优先建议选择这一条"></a>手机号(最宽松), 只要是 1 开头即可, 如果你的手机号是用来接收短信, 优先建议选择这一条</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/^<span class="number">1</span>\d&#123;<span class="number">10</span>&#125;$/;</span><br></pre></td></tr></table></figure><h2 id="日期-如-2000-01-01-或-2000-1-1"><a href="#日期-如-2000-01-01-或-2000-1-1" class="headerlink" title="日期, 如: 2000-01-01 或 2000-1-1"></a>日期, 如: 2000-01-01 或 2000-1-1</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/^\d&#123;<span class="number">4</span>&#125;(-)([<span class="number">0</span><span class="number">-1</span>][<span class="number">0</span><span class="number">-2</span>]|\d)\<span class="number">1</span>([<span class="number">0</span><span class="number">-2</span>]\d|\d|<span class="number">30</span>|<span class="number">31</span>)$/;</span><br></pre></td></tr></table></figure><h2 id="email-地址"><a href="#email-地址" class="headerlink" title="email 地址"></a>email 地址</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/^[a-zA-Z0-9.!#$%&amp;'*+\/=?^_`&#123;|&#125;~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]&#123;0,61&#125;[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]&#123;0,61&#125;[a-zA-Z0-9])?)*$/;</span><br></pre></td></tr></table></figure><h2 id="国内座机电话-如-0341-86091234"><a href="#国内座机电话-如-0341-86091234" class="headerlink" title="国内座机电话,如: 0341-86091234"></a>国内座机电话,如: 0341-86091234</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/\d&#123;<span class="number">3</span>&#125;-\d&#123;<span class="number">8</span>&#125;|\d&#123;<span class="number">4</span>&#125;-\d&#123;<span class="number">7</span>&#125;/;</span><br></pre></td></tr></table></figure><h2 id="一代身份证号-15-位数字"><a href="#一代身份证号-15-位数字" class="headerlink" title="一代身份证号(15 位数字)"></a>一代身份证号(15 位数字)</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/^\d&#123;<span class="number">8</span>&#125;(<span class="number">0</span>\d|<span class="number">10</span>|<span class="number">11</span>|<span class="number">12</span>)([<span class="number">0</span><span class="number">-2</span>]\d|<span class="number">30</span>|<span class="number">31</span>)\d&#123;<span class="number">3</span>&#125;$/;</span><br></pre></td></tr></table></figure><h2 id="二代身份证号-18-位数字-最后一位是校验位-可能为数字或字符-X"><a href="#二代身份证号-18-位数字-最后一位是校验位-可能为数字或字符-X" class="headerlink" title="二代身份证号(18 位数字),最后一位是校验位,可能为数字或字符 X"></a>二代身份证号(18 位数字),最后一位是校验位,可能为数字或字符 X</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/^\d&#123;<span class="number">6</span>&#125;(<span class="number">18</span>|<span class="number">19</span>|<span class="number">20</span>)\d&#123;<span class="number">2</span>&#125;(<span class="number">0</span>\d|<span class="number">10</span>|<span class="number">11</span>|<span class="number">12</span>)([<span class="number">0</span><span class="number">-2</span>]\d|<span class="number">30</span>|<span class="number">31</span>)\d&#123;<span class="number">3</span>&#125;(\d|X|x)$/;</span><br></pre></td></tr></table></figure><h2 id="身份证号-支持-1-2-代-15-位-18-位数字"><a href="#身份证号-支持-1-2-代-15-位-18-位数字" class="headerlink" title="身份证号, 支持 1/2 代(15 位/18 位数字)"></a>身份证号, 支持 1/2 代(15 位/18 位数字)</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/(^\d&#123;<span class="number">8</span>&#125;(<span class="number">0</span>\d|<span class="number">10</span>|<span class="number">11</span>|<span class="number">12</span>)([<span class="number">0</span><span class="number">-2</span>]\d|<span class="number">30</span>|<span class="number">31</span>)\d&#123;<span class="number">3</span>&#125;$)|(^\d&#123;<span class="number">6</span>&#125;(<span class="number">18</span>|<span class="number">19</span>|<span class="number">20</span>)\d&#123;<span class="number">2</span>&#125;(<span class="number">0</span>\d|<span class="number">10</span>|<span class="number">11</span>|<span class="number">12</span>)([<span class="number">0</span><span class="number">-2</span>]\d|<span class="number">30</span>|<span class="number">31</span>)\d&#123;<span class="number">3</span>&#125;(\d|X|x)$)/;</span><br></pre></td></tr></table></figure><h2 id="护照（包含香港、澳门）"><a href="#护照（包含香港、澳门）" class="headerlink" title="护照（包含香港、澳门）"></a>护照（包含香港、澳门）</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/(^[EeKkGgDdSsPpHh]\d&#123;<span class="number">8</span>&#125;$)|(^(([Ee][a-fA-F])|([DdSsPp][Ee])|([Kk][Jj])|([Mm][Aa])|(<span class="number">1</span>[<span class="number">45</span>]))\d&#123;<span class="number">7</span>&#125;$)/;</span><br></pre></td></tr></table></figure><h2 id="帐号是否合法-字母开头，允许-5-16-字节，允许字母数字下划线组合"><a href="#帐号是否合法-字母开头，允许-5-16-字节，允许字母数字下划线组合" class="headerlink" title="帐号是否合法(字母开头，允许 5-16 字节，允许字母数字下划线组合"></a>帐号是否合法(字母开头，允许 5-16 字节，允许字母数字下划线组合</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/^[a-zA-Z][a-zA-Z0<span class="number">-9</span>_]&#123;<span class="number">4</span>,<span class="number">15</span>&#125;$/;</span><br></pre></td></tr></table></figure><h2 id="纯中文-汉字"><a href="#纯中文-汉字" class="headerlink" title="纯中文/汉字"></a>纯中文/汉字</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/^[\u4E00-\u9FA5]+$/;</span><br></pre></td></tr></table></figure><h2 id="是否小数"><a href="#是否小数" class="headerlink" title="是否小数"></a>是否小数</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/^\d+\.\d+$/;</span><br></pre></td></tr></table></figure><h2 id="电话-座机"><a href="#电话-座机" class="headerlink" title="电话(座机)"></a>电话(座机)</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/^<span class="number">0</span>\d&#123;<span class="number">2</span>,<span class="number">3</span>&#125;-\d&#123;<span class="number">7</span>,<span class="number">8</span>&#125;$/;</span><br></pre></td></tr></table></figure><h2 id="纯数字"><a href="#纯数字" class="headerlink" title="纯数字"></a>纯数字</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/^\d&#123;<span class="number">1</span>,&#125;$/;</span><br></pre></td></tr></table></figure><h2 id="是否-html-标签"><a href="#是否-html-标签" class="headerlink" title="是否 html 标签"></a>是否 html 标签</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/<span class="xml"><span class="tag">&lt;<span class="name">(.*)</span>&gt;</span>.*<span class="tag">&lt;<span class="name">\</span>/\<span class="attr">1</span>&gt;</span>|<span class="tag">&lt;<span class="name">(.*)</span> \/&gt;</span>/;</span></span><br></pre></td></tr></table></figure><h2 id="是否-qq-号格式正确"><a href="#是否-qq-号格式正确" class="headerlink" title="是否 qq 号格式正确"></a>是否 qq 号格式正确</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/^[<span class="number">1</span><span class="number">-9</span>][<span class="number">0</span><span class="number">-9</span>]&#123;<span class="number">4</span>,<span class="number">10</span>&#125;$/;</span><br></pre></td></tr></table></figure><h2 id="是否由数字和字母组成"><a href="#是否由数字和字母组成" class="headerlink" title="是否由数字和字母组成"></a>是否由数字和字母组成</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/^[A-Za-z0<span class="number">-9</span>]+$/;</span><br></pre></td></tr></table></figure><h2 id="纯英文字母"><a href="#纯英文字母" class="headerlink" title="纯英文字母"></a>纯英文字母</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/^[a-zA-Z]+$/;</span><br></pre></td></tr></table></figure><h2 id="纯小写英文字母组成"><a href="#纯小写英文字母组成" class="headerlink" title="纯小写英文字母组成"></a>纯小写英文字母组成</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/^[a-z]+$/;</span><br></pre></td></tr></table></figure><h2 id="纯大写英文字母"><a href="#纯大写英文字母" class="headerlink" title="纯大写英文字母"></a>纯大写英文字母</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/^[A-Z]+$/;</span><br></pre></td></tr></table></figure><h2 id="密码强度正则，最少-6-位，包括至少-1-个大写字母，1-个小写字母，1-个数字，1-个特殊字符"><a href="#密码强度正则，最少-6-位，包括至少-1-个大写字母，1-个小写字母，1-个数字，1-个特殊字符" class="headerlink" title="密码强度正则，最少 6 位，包括至少 1 个大写字母，1 个小写字母，1 个数字，1 个特殊字符"></a>密码强度正则，最少 6 位，包括至少 1 个大写字母，1 个小写字母，1 个数字，1 个特殊字符</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/^.*(?=.&#123;6,&#125;)(?=.*\d)(?=.*[A-Z])(?=.*[a-z])(?=.*[!@#$%^&amp;*? ]).*$/;</span><br></pre></td></tr></table></figure><h2 id="用户名正则，4-到-16-位（字母，数字，下划线，减号）"><a href="#用户名正则，4-到-16-位（字母，数字，下划线，减号）" class="headerlink" title="用户名正则，4 到 16 位（字母，数字，下划线，减号）"></a>用户名正则，4 到 16 位（字母，数字，下划线，减号）</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/^[a-zA-Z0<span class="number">-9</span>_-]&#123;<span class="number">4</span>,<span class="number">16</span>&#125;$/;</span><br></pre></td></tr></table></figure><h2 id="ip-v4"><a href="#ip-v4" class="headerlink" title="ip-v4"></a>ip-v4</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/^(?:(?:<span class="number">25</span>[<span class="number">0</span><span class="number">-5</span>]|<span class="number">2</span>[<span class="number">0</span><span class="number">-4</span>][<span class="number">0</span><span class="number">-9</span>]|[<span class="number">01</span>]?[<span class="number">0</span><span class="number">-9</span>][<span class="number">0</span><span class="number">-9</span>]?)\.)&#123;<span class="number">3</span>&#125;(?:<span class="number">25</span>[<span class="number">0</span><span class="number">-5</span>]|<span class="number">2</span>[<span class="number">0</span><span class="number">-4</span>][<span class="number">0</span><span class="number">-9</span>]|[<span class="number">01</span>]?[<span class="number">0</span><span class="number">-9</span>][<span class="number">0</span><span class="number">-9</span>]?)$/;</span><br></pre></td></tr></table></figure><h2 id="ip-v6"><a href="#ip-v6" class="headerlink" title="ip-v6"></a>ip-v6</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/^((([<span class="number">0</span><span class="number">-9</span>A-Fa-f]&#123;<span class="number">1</span>,<span class="number">4</span>&#125;:)&#123;<span class="number">7</span>&#125;[<span class="number">0</span><span class="number">-9</span>A-Fa-f]&#123;<span class="number">1</span>,<span class="number">4</span>&#125;)|(([<span class="number">0</span><span class="number">-9</span>A-Fa-f]&#123;<span class="number">1</span>,<span class="number">4</span>&#125;:)&#123;<span class="number">6</span>&#125;:[<span class="number">0</span><span class="number">-9</span>A-Fa-f]&#123;<span class="number">1</span>,<span class="number">4</span>&#125;)|(([<span class="number">0</span><span class="number">-9</span>A-Fa-f]&#123;<span class="number">1</span>,<span class="number">4</span>&#125;:)&#123;<span class="number">5</span>&#125;:([<span class="number">0</span><span class="number">-9</span>A-Fa-f]&#123;<span class="number">1</span>,<span class="number">4</span>&#125;:)?[<span class="number">0</span><span class="number">-9</span>A-Fa-f]&#123;<span class="number">1</span>,<span class="number">4</span>&#125;)|(([<span class="number">0</span><span class="number">-9</span>A-Fa-f]&#123;<span class="number">1</span>,<span class="number">4</span>&#125;:)&#123;<span class="number">4</span>&#125;:([<span class="number">0</span><span class="number">-9</span>A-Fa-f]&#123;<span class="number">1</span>,<span class="number">4</span>&#125;:)&#123;<span class="number">0</span>,<span class="number">2</span>&#125;[<span class="number">0</span><span class="number">-9</span>A-Fa-f]&#123;<span class="number">1</span>,<span class="number">4</span>&#125;)|(([<span class="number">0</span><span class="number">-9</span>A-Fa-f]&#123;<span class="number">1</span>,<span class="number">4</span>&#125;:)&#123;<span class="number">3</span>&#125;:([<span class="number">0</span><span class="number">-9</span>A-Fa-f]&#123;<span class="number">1</span>,<span class="number">4</span>&#125;:)&#123;<span class="number">0</span>,<span class="number">3</span>&#125;[<span class="number">0</span><span class="number">-9</span>A-Fa-f]&#123;<span class="number">1</span>,<span class="number">4</span>&#125;)|(([<span class="number">0</span><span class="number">-9</span>A-Fa-f]&#123;<span class="number">1</span>,<span class="number">4</span>&#125;:)&#123;<span class="number">2</span>&#125;:([<span class="number">0</span><span class="number">-9</span>A-Fa-f]&#123;<span class="number">1</span>,<span class="number">4</span>&#125;:)&#123;<span class="number">0</span>,<span class="number">4</span>&#125;[<span class="number">0</span><span class="number">-9</span>A-Fa-f]&#123;<span class="number">1</span>,<span class="number">4</span>&#125;)|(([<span class="number">0</span><span class="number">-9</span>A-Fa-f]&#123;<span class="number">1</span>,<span class="number">4</span>&#125;:)&#123;<span class="number">6</span>&#125;((\b((<span class="number">25</span>[<span class="number">0</span><span class="number">-5</span>])|(<span class="number">1</span>\d&#123;<span class="number">2</span>&#125;)|(<span class="number">2</span>[<span class="number">0</span><span class="number">-4</span>]\d)|(\d&#123;<span class="number">1</span>,<span class="number">2</span>&#125;))\b)\.)&#123;<span class="number">3</span>&#125;(\b((<span class="number">25</span>[<span class="number">0</span><span class="number">-5</span>])|(<span class="number">1</span>\d&#123;<span class="number">2</span>&#125;)|(<span class="number">2</span>[<span class="number">0</span><span class="number">-4</span>]\d)|(\d&#123;<span class="number">1</span>,<span class="number">2</span>&#125;))\b))|(([<span class="number">0</span><span class="number">-9</span>A-Fa-f]&#123;<span class="number">1</span>,<span class="number">4</span>&#125;:)&#123;<span class="number">0</span>,<span class="number">5</span>&#125;:((\b((<span class="number">25</span>[<span class="number">0</span><span class="number">-5</span>])|(<span class="number">1</span>\d&#123;<span class="number">2</span>&#125;)|(<span class="number">2</span>[<span class="number">0</span><span class="number">-4</span>]\d)|(\d&#123;<span class="number">1</span>,<span class="number">2</span>&#125;))\b)\.)&#123;<span class="number">3</span>&#125;(\b((<span class="number">25</span>[<span class="number">0</span><span class="number">-5</span>])|(<span class="number">1</span>\d&#123;<span class="number">2</span>&#125;)|(<span class="number">2</span>[<span class="number">0</span><span class="number">-4</span>]\d)|(\d&#123;<span class="number">1</span>,<span class="number">2</span>&#125;))\b))|(::([<span class="number">0</span><span class="number">-9</span>A-Fa-f]&#123;<span class="number">1</span>,<span class="number">4</span>&#125;:)&#123;<span class="number">0</span>,<span class="number">5</span>&#125;((\b((<span class="number">25</span>[<span class="number">0</span><span class="number">-5</span>])|(<span class="number">1</span>\d&#123;<span class="number">2</span>&#125;)|(<span class="number">2</span>[<span class="number">0</span><span class="number">-4</span>]\d)|(\d&#123;<span class="number">1</span>,<span class="number">2</span>&#125;))\b)\.)&#123;<span class="number">3</span>&#125;(\b((<span class="number">25</span>[<span class="number">0</span><span class="number">-5</span>])|(<span class="number">1</span>\d&#123;<span class="number">2</span>&#125;)|(<span class="number">2</span>[<span class="number">0</span><span class="number">-4</span>]\d)|(\d&#123;<span class="number">1</span>,<span class="number">2</span>&#125;))\b))|([<span class="number">0</span><span class="number">-9</span>A-Fa-f]&#123;<span class="number">1</span>,<span class="number">4</span>&#125;::([<span class="number">0</span><span class="number">-9</span>A-Fa-f]&#123;<span class="number">1</span>,<span class="number">4</span>&#125;:)&#123;<span class="number">0</span>,<span class="number">5</span>&#125;[<span class="number">0</span><span class="number">-9</span>A-Fa-f]&#123;<span class="number">1</span>,<span class="number">4</span>&#125;)|(::([<span class="number">0</span><span class="number">-9</span>A-Fa-f]&#123;<span class="number">1</span>,<span class="number">4</span>&#125;:)&#123;<span class="number">0</span>,<span class="number">6</span>&#125;[<span class="number">0</span><span class="number">-9</span>A-Fa-f]&#123;<span class="number">1</span>,<span class="number">4</span>&#125;)|(([<span class="number">0</span><span class="number">-9</span>A-Fa-f]&#123;<span class="number">1</span>,<span class="number">4</span>&#125;:)&#123;<span class="number">1</span>,<span class="number">7</span>&#125;:))$/i;</span><br></pre></td></tr></table></figure><h2 id="16-进制颜色"><a href="#16-进制颜色" class="headerlink" title="16 进制颜色"></a>16 进制颜色</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/^#?([a-fA-F0-9]&#123;6&#125;|[a-fA-F0-9]&#123;3&#125;)$/;</span><br></pre></td></tr></table></figure><h2 id="微信号，6-至-20-位，以字母开头，字母，数字，减号，下划线"><a href="#微信号，6-至-20-位，以字母开头，字母，数字，减号，下划线" class="headerlink" title="微信号，6 至 20 位，以字母开头，字母，数字，减号，下划线"></a>微信号，6 至 20 位，以字母开头，字母，数字，减号，下划线</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/^[a-zA-Z][-_a-zA-Z0<span class="number">-9</span>]&#123;<span class="number">5</span>,<span class="number">19</span>&#125;$/;</span><br></pre></td></tr></table></figure><h2 id="中国邮政编码"><a href="#中国邮政编码" class="headerlink" title="中国邮政编码"></a>中国邮政编码</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/^(<span class="number">0</span>[<span class="number">1</span><span class="number">-7</span>]|<span class="number">1</span>[<span class="number">0</span><span class="number">-356</span>]|<span class="number">2</span>[<span class="number">0</span><span class="number">-7</span>]|<span class="number">3</span>[<span class="number">0</span><span class="number">-6</span>]|<span class="number">4</span>[<span class="number">0</span><span class="number">-7</span>]|<span class="number">5</span>[<span class="number">1</span><span class="number">-7</span>]|<span class="number">6</span>[<span class="number">1</span><span class="number">-7</span>]|<span class="number">7</span>[<span class="number">0</span><span class="number">-5</span>]|<span class="number">8</span>[<span class="number">013</span><span class="number">-6</span>])\d&#123;<span class="number">4</span>&#125;$/;</span><br></pre></td></tr></table></figure><h2 id="只包含中文和数字"><a href="#只包含中文和数字" class="headerlink" title="只包含中文和数字"></a>只包含中文和数字</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/^(([\u4E00-\u9FA5])|(\d))+$/;</span><br></pre></td></tr></table></figure><h2 id="非字母"><a href="#非字母" class="headerlink" title="非字母"></a>非字母</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/[^A-Za-z]$/;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;正则大全&quot;&gt;&lt;a href=&quot;#正则大全&quot; class=&quot;headerlink&quot; title=&quot;正则大全   &quot;&gt;&lt;/a&gt;正则大全 &lt;img src=&quot;https://img.shields.io/badge/状态-积极更新-673ab7.svg&quot; alt=&quot;&quot;&gt;
      
    
    </summary>
    
      <category term="前端" scheme="https://www.mizuka.top/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="可以公开的情报" scheme="https://www.mizuka.top/tags/%E5%8F%AF%E4%BB%A5%E5%85%AC%E5%BC%80%E7%9A%84%E6%83%85%E6%8A%A5/"/>
    
      <category term="开发" scheme="https://www.mizuka.top/tags/%E5%BC%80%E5%8F%91/"/>
    
      <category term="前端" scheme="https://www.mizuka.top/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>Android如何直接投屏到电脑</title>
    <link href="https://www.mizuka.top/2019/07/09/Android%E5%A6%82%E4%BD%95%E7%9B%B4%E6%8E%A5%E6%8A%95%E5%B1%8F%E5%88%B0%E7%94%B5%E8%84%91/"/>
    <id>https://www.mizuka.top/2019/07/09/Android如何直接投屏到电脑/</id>
    <published>2019-07-09T18:17:35.000Z</published>
    <updated>2019-10-18T07:55:16.111Z</updated>
    
    <content type="html"><![CDATA[<h1 id="安装-scrcpy"><a href="#安装-scrcpy" class="headerlink" title="安装 scrcpy"></a>安装 scrcpy</h1><p><code>brew install scrcpy</code><br>连接上安卓手机之后就行</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;安装-scrcpy&quot;&gt;&lt;a href=&quot;#安装-scrcpy&quot; class=&quot;headerlink&quot; title=&quot;安装 scrcpy&quot;&gt;&lt;/a&gt;安装 scrcpy&lt;/h1&gt;&lt;p&gt;&lt;code&gt;brew install scrcpy&lt;/code&gt;&lt;br&gt;连接上安卓手
      
    
    </summary>
    
    
      <category term="可以公开的情报" scheme="https://www.mizuka.top/tags/%E5%8F%AF%E4%BB%A5%E5%85%AC%E5%BC%80%E7%9A%84%E6%83%85%E6%8A%A5/"/>
    
      <category term="开发" scheme="https://www.mizuka.top/tags/%E5%BC%80%E5%8F%91/"/>
    
      <category term="前端" scheme="https://www.mizuka.top/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="android" scheme="https://www.mizuka.top/tags/android/"/>
    
  </entry>
  
  <entry>
    <title>上传app卡在通过app store进行鉴定</title>
    <link href="https://www.mizuka.top/2019/07/09/%E4%B8%8A%E4%BC%A0app%E5%8D%A1%E5%9C%A8%E9%80%9A%E8%BF%87App%20store%E8%BF%9B%E8%A1%8C%E9%89%B4%E5%AE%9A/"/>
    <id>https://www.mizuka.top/2019/07/09/上传app卡在通过App store进行鉴定/</id>
    <published>2019-07-09T18:17:35.000Z</published>
    <updated>2019-10-18T07:55:16.111Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~</span><br><span class="line">mv .itmstransporter/ .old_itmstransporter/</span><br><span class="line"><span class="string">"/Applications/Xcode.app/Contents/Applications/Application Loader.app/Contents/itms/bin/iTMSTransporter"</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=
      
    
    </summary>
    
    
      <category term="可以公开的情报" scheme="https://www.mizuka.top/tags/%E5%8F%AF%E4%BB%A5%E5%85%AC%E5%BC%80%E7%9A%84%E6%83%85%E6%8A%A5/"/>
    
      <category term="开发" scheme="https://www.mizuka.top/tags/%E5%BC%80%E5%8F%91/"/>
    
      <category term="前端" scheme="https://www.mizuka.top/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="ios" scheme="https://www.mizuka.top/tags/ios/"/>
    
  </entry>
  
  <entry>
    <title>一次node内存泄漏的调查</title>
    <link href="https://www.mizuka.top/2019/06/15/%E4%B8%80%E6%AC%A1node%E5%86%85%E5%AD%98%E6%B3%84%E6%BC%8F%E8%B0%83%E6%9F%A5/"/>
    <id>https://www.mizuka.top/2019/06/15/一次node内存泄漏调查/</id>
    <published>2019-06-15T11:41:57.000Z</published>
    <updated>2019-10-18T07:55:16.111Z</updated>
    
    <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>公司需要对接各种渠道，进行渠道管理进行了统一规范，生成了 渠道管理 这个类，上线后发现一直报警，内存居高不下，而且走势呈阶梯上升，判断发生了内存泄漏</p><h2 id="技术栈"><a href="#技术栈" class="headerlink" title="技术栈"></a>技术栈</h2><h3 id="Nuxt"><a href="#Nuxt" class="headerlink" title="Nuxt"></a>Nuxt</h3><p>基于 nuxt 和 vue 开发的一套前端代码</p><h3 id="nodejs-性能平台"><a href="#nodejs-性能平台" class="headerlink" title="nodejs 性能平台"></a>nodejs 性能平台</h3><p>alinode，一个 ali 官方出的用来监控整个 node 内存和机器运行情况的程序，非常好用，问题是数据有一定延时</p><h2 id="解决的步骤"><a href="#解决的步骤" class="headerlink" title="解决的步骤"></a>解决的步骤</h2><h3 id="首先尝试临时解决问题"><a href="#首先尝试临时解决问题" class="headerlink" title="首先尝试临时解决问题"></a>首先尝试临时解决问题</h3><p>因为线上一共有四台机器跑 ssr，所以通过设置不同的 crontab 进行分批重启 pm2，使得服务不间断</p><h3 id="下线问题的-feture"><a href="#下线问题的-feture" class="headerlink" title="下线问题的 feture"></a>下线问题的 feture</h3><p>最近上线的 feture 只有 渠道管理，于是回滚代码之后重新发布，发现问题解决，找到问题代码区域</p><h3 id="CodeReview"><a href="#CodeReview" class="headerlink" title="CodeReview"></a>CodeReview</h3><p>开会大家回顾整个问题代码，分析之后发现可能的问题在于使用了 global 的 mixin，改成 Vue plugin 的形式使用，具体可以参考<a href="https://github.com/vuejs/vue/issues/5089#issuecomment-284260111" target="_blank" rel="noopener">这个 issue</a><br>测试环境下发现问题依旧没有解决</p><h3 id="验尸"><a href="#验尸" class="headerlink" title="验尸"></a>验尸</h3><p>对比了最近几次 alinode 抓下的堆快照，发现所有的闭包都是 vue 实例，而且都会有一个同样的 key,这个 key 正好是 nuxt 的插件 inject 之后的 key 名</p><h3 id="找出问题所在"><a href="#找出问题所在" class="headerlink" title="找出问题所在"></a>找出问题所在</h3><p>最终发现是上 渠道管理 的时候在 nuxt 的 plugin 中使用了 inject，因为 inject 的时候是同一个实例，本身的目的是可以获取 渠道 列表</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = <span class="function">(<span class="params">ctx, inject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> 渠道管理 = <span class="built_in">require</span>(<span class="string">'渠道管理'</span>)</span><br><span class="line">  inject(<span class="string">'渠道管理'</span>, 渠道管理)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h2><p>在于 v8 的整个 gc 机制在于是否能够被访问到，因为 inject 之后不知道为何从 渠道管理 能够访问到所有 inject 之后的 vue 实例，所以这一系列的 vue 对象都不可被回收</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h1&gt;&lt;p&gt;公司需要对接各种渠道，进行渠道管理进行了统一规范，生成了 渠道管理 这个类，上线后发现一直报警，内存居高不下，而且走势呈阶梯上升，判断发生了
      
    
    </summary>
    
      <category term="可以公开的情报" scheme="https://www.mizuka.top/categories/%E5%8F%AF%E4%BB%A5%E5%85%AC%E5%BC%80%E7%9A%84%E6%83%85%E6%8A%A5/"/>
    
    
      <category term="前端" scheme="https://www.mizuka.top/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="经验" scheme="https://www.mizuka.top/tags/%E7%BB%8F%E9%AA%8C/"/>
    
  </entry>
  
  <entry>
    <title>一次node内存泄漏排查和解决</title>
    <link href="https://www.mizuka.top/2019/06/10/%E4%B8%80%E6%AC%A1node%E5%86%85%E5%AD%98%E6%B3%84%E6%BC%8F%E6%8E%92%E6%9F%A5%E5%92%8C%E8%A7%A3%E5%86%B3/"/>
    <id>https://www.mizuka.top/2019/06/10/一次node内存泄漏排查和解决/</id>
    <published>2019-06-10T10:41:57.000Z</published>
    <updated>2019-10-18T07:55:16.111Z</updated>
    
    <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>公司需要对接各种渠道，进行渠道管理进行了统一规范，生成了 ChannelManager 这个类，上线后发现一直报警，内存居高不下，而且走势呈阶梯上升，判断发生了内存泄漏</p><h2 id="技术栈"><a href="#技术栈" class="headerlink" title="技术栈"></a>技术栈</h2><h3 id="Nuxt"><a href="#Nuxt" class="headerlink" title="Nuxt"></a>Nuxt</h3><p>基于 nuxt 和 vue 开发的一套前端代码</p><h3 id="nodejs-性能平台"><a href="#nodejs-性能平台" class="headerlink" title="nodejs 性能平台"></a>nodejs 性能平台</h3><p>alinode，一个 ali 官方出的用来监控整个 node 内存和机器运行情况的程序，非常好用，问题是数据有一定延时</p><h2 id="解决的步骤"><a href="#解决的步骤" class="headerlink" title="解决的步骤"></a>解决的步骤</h2><h3 id="首先尝试临时解决问题"><a href="#首先尝试临时解决问题" class="headerlink" title="首先尝试临时解决问题"></a>首先尝试临时解决问题</h3><p>因为线上一共有四台机器跑 ssr，所以通过设置不同的 crontab 进行分批重启 pm2，使得服务不间断</p><h3 id="下线问题的-feture"><a href="#下线问题的-feture" class="headerlink" title="下线问题的 feture"></a>下线问题的 feture</h3><p>最近上线的 feture 只有 channelManager，于是回滚代码之后重新发布，发现问题解决，找到问题代码区域</p><h3 id="CodeReview"><a href="#CodeReview" class="headerlink" title="CodeReview"></a>CodeReview</h3><p>开会大家回顾整个问题代码，分析之后发现可能的问题在于使用了 global 的 mixin，改成 Vue plugin 的形式使用，具体可以参考<a href="https://github.com/vuejs/vue/issues/5089#issuecomment-284260111" target="_blank" rel="noopener">这个 issue</a><br>测试环境下发现问题依旧没有解决</p><h3 id="验尸"><a href="#验尸" class="headerlink" title="验尸"></a>验尸</h3><p>对比了最近几次 alinode 抓下的堆快照，发现所有的闭包都是 vue 实例，而且都会有一个同样的 key<code>$channelManager</code></p><h3 id="找出问题所在"><a href="#找出问题所在" class="headerlink" title="找出问题所在"></a>找出问题所在</h3><p>最终发现是上 channelManager 的时候在 nuxt 的 plugin 中使用了 inject，因为 inject 的时候是同一个实例，本身的目的是可以获取 channel 列表</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = <span class="function">(<span class="params">ctx, inject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> ChannelManager = <span class="built_in">require</span>(<span class="string">'ChannelManager'</span>)</span><br><span class="line">  inject(<span class="string">'channelManager'</span>, ChannelManager)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h2><p>在于 v8 的整个 gc 机制在于是否能够被访问到，因为 inject 之后不知道为何从 channelManager 能够访问到所有 inject 之后的 vue 实例，所以这一系列的 vue 对象都不可被回收</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h1&gt;&lt;p&gt;公司需要对接各种渠道，进行渠道管理进行了统一规范，生成了 ChannelManager 这个类，上线后发现一直报警，内存居高不下，而且走势呈
      
    
    </summary>
    
      <category term="可以公开的情报" scheme="https://www.mizuka.top/categories/%E5%8F%AF%E4%BB%A5%E5%85%AC%E5%BC%80%E7%9A%84%E6%83%85%E6%8A%A5/"/>
    
    
      <category term="前端" scheme="https://www.mizuka.top/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="经验" scheme="https://www.mizuka.top/tags/%E7%BB%8F%E9%AA%8C/"/>
    
  </entry>
  
  <entry>
    <title>如何删除除了Master之外的所有分支</title>
    <link href="https://www.mizuka.top/2019/06/05/%E5%A6%82%E4%BD%95%E5%88%A0%E9%99%A4%E9%99%A4%E4%BA%86Master%E4%B9%8B%E5%A4%96%E7%9A%84%E6%89%80%E6%9C%89%E5%88%86%E6%94%AF/"/>
    <id>https://www.mizuka.top/2019/06/05/如何删除除了Master之外的所有分支/</id>
    <published>2019-06-05T11:41:57.000Z</published>
    <updated>2019-10-18T07:55:16.111Z</updated>
    
    <content type="html"><![CDATA[<h1 id="如何删除除了-Master-之外的所有分支"><a href="#如何删除除了-Master-之外的所有分支" class="headerlink" title="如何删除除了 Master 之外的所有分支"></a>如何删除除了 Master 之外的所有分支</h1><ol><li>切换到 master</li><li>删了其他的</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git stash &amp;&amp; git checkout master &amp;&amp; git branch | grep -v <span class="string">"master"</span> | xargs git branch -D</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;如何删除除了-Master-之外的所有分支&quot;&gt;&lt;a href=&quot;#如何删除除了-Master-之外的所有分支&quot; class=&quot;headerlink&quot; title=&quot;如何删除除了 Master 之外的所有分支&quot;&gt;&lt;/a&gt;如何删除除了 Master 之外的所有分支&lt;/
      
    
    </summary>
    
      <category term="可以公开的情报" scheme="https://www.mizuka.top/categories/%E5%8F%AF%E4%BB%A5%E5%85%AC%E5%BC%80%E7%9A%84%E6%83%85%E6%8A%A5/"/>
    
    
      <category term="前端" scheme="https://www.mizuka.top/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="上手指南" scheme="https://www.mizuka.top/tags/%E4%B8%8A%E6%89%8B%E6%8C%87%E5%8D%97/"/>
    
      <category term="MAC" scheme="https://www.mizuka.top/tags/MAC/"/>
    
      <category term="经验" scheme="https://www.mizuka.top/tags/%E7%BB%8F%E9%AA%8C/"/>
    
  </entry>
  
  <entry>
    <title>有关前端和pdf相关的几件事</title>
    <link href="https://www.mizuka.top/2019/04/10/%E6%9C%89%E5%85%B3%E5%89%8D%E7%AB%AF%E5%92%8Cpdf%E7%9B%B8%E5%85%B3%E7%9A%84%E5%87%A0%E4%BB%B6%E4%BA%8B/"/>
    <id>https://www.mizuka.top/2019/04/10/有关前端和pdf相关的几件事/</id>
    <published>2019-04-10T13:46:10.000Z</published>
    <updated>2019-10-18T07:55:16.115Z</updated>
    
    <content type="html"><![CDATA[<h1 id="有关前端和pdf相关的几件事"><a href="#有关前端和pdf相关的几件事" class="headerlink" title="有关前端和pdf相关的几件事"></a>有关前端和pdf相关的几件事</h1><blockquote><p>pdf（Portable Document Format的简称，意为“便携式文档格式”）</p></blockquote><p>前端工作中，也避免不了要和pdf打交道，以下列一些相关的信息</p><h2 id="预览pdf的方法"><a href="#预览pdf的方法" class="headerlink" title="预览pdf的方法"></a>预览pdf的方法</h2><h3 id="通过浏览器自己的能力"><a href="#通过浏览器自己的能力" class="headerlink" title="通过浏览器自己的能力"></a>通过浏览器自己的能力</h3><ol><li><p>直接<figure class="highlight plain"><figcaption><span>href</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2. iframe/object ```&lt;iframe src=&quot;pdf地址&quot;&gt;</span><br></pre></td></tr></table></figure></p></li><li><p>embed <code>&lt;embed :src=&quot;previewUrl&quot; type=&quot;application/pdf&quot;</code></p></li></ol><p>以上几种方法都存在<a href="https://segmentfault.com/a/1190000015597029" target="_blank" rel="noopener">跨域</a>问题<br>当然其中pdf浏览器的样式都是浏览器自带的，如果想要自定义，可能会比较无力</p><h3 id="通过相关的库"><a href="#通过相关的库" class="headerlink" title="通过相关的库"></a>通过相关的库</h3><ol><li><a href="https://pdfobject.com/" target="_blank" rel="noopener">pdfobject</a> 其实也是基于embed方案的</li><li><a href="https://mozilla.github.io/pdf.js/" target="_blank" rel="noopener">pdf.js</a> pdfjs适用于自定义显示方案的，但是依赖webworker，兼容性可能不行</li></ol><h4 id="pdf-js"><a href="#pdf-js" class="headerlink" title="pdf.js"></a>pdf.js</h4><p>pdf.js 如果是通过npm安装的话，可能会遇到import相关的问题，这个时候改用<code>pdfjs-dist/webpack</code>就可以正常引入啦，不过包比较大，还是建议使用cdn</p><h2 id="生成pdf的方法"><a href="#生成pdf的方法" class="headerlink" title="生成pdf的方法"></a>生成pdf的方法</h2><p>有通过前端/后端等多种方法，生成的pdf也分为纯图片/文字+图片的类型</p><h3 id="通过后端"><a href="#通过后端" class="headerlink" title="通过后端"></a>通过后端</h3><ol><li><a href="https://github.com/GoogleChrome/puppeteer/blob/v1.14.0/docs/api.md" target="_blank" rel="noopener">puppeteer</a> 无头浏览器，网页生成pdf</li><li>jsPdf + html2canvas, 页面生成图片之后扔进jsPdf中</li><li>jsPdf, 纯js方案生成，缺点是需要自己计算每个元素的位置</li><li><a href="http://pdfmake.org/#/" target="_blank" rel="noopener">pdfmake</a> 通过定义js对象来进行pdf,缺点是引入字体包导致整个依赖比较大，体验上比较好</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;有关前端和pdf相关的几件事&quot;&gt;&lt;a href=&quot;#有关前端和pdf相关的几件事&quot; class=&quot;headerlink&quot; title=&quot;有关前端和pdf相关的几件事&quot;&gt;&lt;/a&gt;有关前端和pdf相关的几件事&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;pdf（Porta
      
    
    </summary>
    
      <category term="可以公开的情报" scheme="https://www.mizuka.top/categories/%E5%8F%AF%E4%BB%A5%E5%85%AC%E5%BC%80%E7%9A%84%E6%83%85%E6%8A%A5/"/>
    
    
      <category term="教程" scheme="https://www.mizuka.top/tags/%E6%95%99%E7%A8%8B/"/>
    
      <category term="javascript" scheme="https://www.mizuka.top/tags/javascript/"/>
    
      <category term="pdf" scheme="https://www.mizuka.top/tags/pdf/"/>
    
  </entry>
  
  <entry>
    <title>axios如何中断请求</title>
    <link href="https://www.mizuka.top/2019/03/29/axios%E5%A6%82%E4%BD%95%E4%B8%AD%E6%96%AD%E8%AF%B7%E6%B1%82/"/>
    <id>https://www.mizuka.top/2019/03/29/axios如何中断请求/</id>
    <published>2019-03-29T11:41:57.000Z</published>
    <updated>2019-10-18T07:55:16.111Z</updated>
    
    <content type="html"><![CDATA[<h1 id="axios-如何中断请求"><a href="#axios-如何中断请求" class="headerlink" title="axios 如何中断请求"></a>axios 如何中断请求</h1><p>axios 是一个非常方便的请求库，但是缺没有原生提供一个 abort 接口，因为 axios 的返回是一个 promise，我们可以利用 promise 的特性来实现一个 abort 方法</p><h2 id="Promise-race"><a href="#Promise-race" class="headerlink" title="Promise.race"></a>Promise.race</h2><p>promise.race 方法从字面意思上就是赛跑，其中只要有任意一个完成了，就返回完成的那个，有一个失败了，就改为失败，利用这个特性就能完成我们的 abort 方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Promise</span>.race([</span><br><span class="line">        <span class="comment">// 等待取消组</span></span><br><span class="line">        <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">_resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">          notify.onClose = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            reject(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'手动停止导出！'</span>))</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;),</span><br><span class="line">        <span class="comment">// 获取数据组</span></span><br><span class="line">        axios.get()</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>当然，例子中利用了 element-ui 的 notify 组件，绑定了 notify 组件的 onClose 方法，实际上也可以通过封装对象的方式实现</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;axios-如何中断请求&quot;&gt;&lt;a href=&quot;#axios-如何中断请求&quot; class=&quot;headerlink&quot; title=&quot;axios 如何中断请求&quot;&gt;&lt;/a&gt;axios 如何中断请求&lt;/h1&gt;&lt;p&gt;axios 是一个非常方便的请求库，但是缺没有原生提供一个 
      
    
    </summary>
    
      <category term="可以公开的情报" scheme="https://www.mizuka.top/categories/%E5%8F%AF%E4%BB%A5%E5%85%AC%E5%BC%80%E7%9A%84%E6%83%85%E6%8A%A5/"/>
    
    
      <category term="前端" scheme="https://www.mizuka.top/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="上手指南" scheme="https://www.mizuka.top/tags/%E4%B8%8A%E6%89%8B%E6%8C%87%E5%8D%97/"/>
    
      <category term="MAC" scheme="https://www.mizuka.top/tags/MAC/"/>
    
      <category term="经验" scheme="https://www.mizuka.top/tags/%E7%BB%8F%E9%AA%8C/"/>
    
  </entry>
  
  <entry>
    <title>Mac前端上手指南</title>
    <link href="https://www.mizuka.top/2019/02/11/Mac%E5%89%8D%E7%AB%AF%E4%B8%8A%E6%89%8B%E6%8C%87%E5%8D%97/"/>
    <id>https://www.mizuka.top/2019/02/11/Mac前端上手指南/</id>
    <published>2019-02-11T11:41:57.000Z</published>
    <updated>2019-10-18T07:55:16.111Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Mac-前端上手指南"><a href="#Mac-前端上手指南" class="headerlink" title="Mac 前端上手指南"></a>Mac 前端上手指南</h1><blockquote><p>MAC 是一个强大的生产力工具，但是因为 g*w 的原因以及网速的原因，还是需要一些优化和调整的</p></blockquote><p><a href="https://juejin.im/post/5c60eb5f51882524c84efba3" target="_blank" rel="noopener"><img src="https://badge.juejin.im/entry/5c60eb815188256283253592/likes.svg?style=flat-square" alt=""></a></p><h1 id="Homebrew"><a href="#Homebrew" class="headerlink" title="Homebrew"></a><a href="https://brew.sh/" target="_blank" rel="noopener">Homebrew</a></h1><blockquote><p>一个强大的安装包管理工具.</p><p>macOS 缺失的软件包的管理器</p></blockquote><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/bin/ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot;</span><br></pre></td></tr></table></figure><p>将以上命令粘贴至终端。</p><p>脚本会在执行前暂停，并说明将它将做什么。高级安装选项在 这里 (required for Linux and Windows 10 Subsystem for Linux)。</p><h2 id="替换源"><a href="#替换源" class="headerlink" title="替换源"></a>替换源</h2><blockquote><p>参考<a href="https://mirror.tuna.tsinghua.edu.cn/help/homebrew/" target="_blank" rel="noopener">清华</a>的加速器</p></blockquote><h3 id="替换现有上游"><a href="#替换现有上游" class="headerlink" title="替换现有上游"></a>替换现有上游</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> <span class="string">"<span class="variable">$(brew --repo)</span>"</span></span><br><span class="line">git remote <span class="built_in">set</span>-url origin https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/brew.git</span><br><span class="line"><span class="built_in">cd</span> <span class="string">"<span class="variable">$(brew --repo)</span>/Library/Taps/homebrew/homebrew-core"</span></span><br><span class="line">git remote <span class="built_in">set</span>-url origin https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/homebrew-core.git</span><br><span class="line"></span><br><span class="line">brew update</span><br></pre></td></tr></table></figure><h3 id="使用-homebrew-science-或者-homebrew-python"><a href="#使用-homebrew-science-或者-homebrew-python" class="headerlink" title="使用 homebrew-science 或者 homebrew-python"></a>使用 homebrew-science 或者 homebrew-python</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> <span class="string">"<span class="variable">$(brew --repo)</span>/Library/Taps/homebrew/homebrew-science"</span></span><br><span class="line">git remote <span class="built_in">set</span>-url origin https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/homebrew-science.git</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> <span class="string">"<span class="variable">$(brew --repo)</span>/Library/Taps/homebrew/homebrew-python"</span></span><br><span class="line">git remote <span class="built_in">set</span>-url origin https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/homebrew-python.git</span><br><span class="line"></span><br><span class="line">brew update</span><br></pre></td></tr></table></figure><h1 id="优化命令行-改用-zsh"><a href="#优化命令行-改用-zsh" class="headerlink" title="优化命令行-改用 zsh"></a>优化命令行-改用 zsh</h1><blockquote><p>使用 mac 的一个原因就是因为强大的命令行，原生终端已经很好了，但是还是可以进一步进行优化的</p></blockquote><h2 id="安装-iterm2"><a href="#安装-iterm2" class="headerlink" title="安装 iterm2"></a>安装 iterm2</h2><blockquote><p>比终端好用的多的终端</p></blockquote><p><a href="https://www.iterm2.com/" target="_blank" rel="noopener">官网下载</a>然后进行安装即可</p><h2 id="zsh"><a href="#zsh" class="headerlink" title="zsh"></a>zsh</h2><blockquote><p>zsh 兼容 bash 但是显示的细节更丰富</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/1864602-ba00e01e48afab32.png" alt=""></p><h3 id="Zsh-具有以下主要功能："><a href="#Zsh-具有以下主要功能：" class="headerlink" title="Zsh 具有以下主要功能："></a>Zsh 具有以下主要功能：</h3><ul><li>开箱即用、可编程的命令行补全功能可以帮助用户输入各种参数以及选项。</li><li>在用户启动的所有 shell 中共享命令历史。</li><li>通过扩展的文件通配符，可以不利用外部命令达到 find 命令一般展开文件名。</li><li>改进的变量与数组处理。</li><li>在缓冲区中编辑多行命令。</li><li>多种兼容模式，例如使用/bin/sh 运行时可以伪装成 Bourne shell。<br>可以定制呈现形式的提示符；包括在屏幕右端显示信息，并在键入长命令时自动隐藏。</li><li>可加载的模块，提供其他各种支持：完整的 TCP 与 Unix 域套接字控制，</li><li>FTP 客户端与扩充过的数学函数。</li><li>完全可定制化。</li></ul><h3 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h3><p>自带的，iterm2 安装完之后文件夹都帮你建立好了</p><h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chsh -s /bin/zsh</span><br></pre></td></tr></table></figure><h3 id="美化"><a href="#美化" class="headerlink" title="美化"></a>美化</h3><h4 id="安装-oh-my-zsh"><a href="#安装-oh-my-zsh" class="headerlink" title="安装 oh my zsh"></a>安装 oh my zsh</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://github.com/robbyrussell/oh-my-zsh/raw/master/tools/install.sh -O - | sh</span><br></pre></td></tr></table></figure><h4 id="更换主题和插件"><a href="#更换主题和插件" class="headerlink" title="更换主题和插件"></a><a href="https://www.jianshu.com/p/d194d29e488c?open_source=weibo_search" target="_blank" rel="noopener">更换主题和插件</a></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">修改主题：</span><br><span class="line"></span><br><span class="line">$ vim ~/.zshrc</span><br><span class="line">将ZSH_THEME改成ys</span><br><span class="line"></span><br><span class="line">ZSH_THEME=&quot;ys&quot;</span><br><span class="line">更新配置：</span><br><span class="line"></span><br><span class="line">$ source ~/.zshrc</span><br></pre></td></tr></table></figure><h1 id="node"><a href="#node" class="headerlink" title="node"></a>node</h1><blockquote><p>改用淘宝镜像 这样还能防止一些包要从国外下载源码再编译造成的问题</p></blockquote><h2 id="安装原生的-node"><a href="#安装原生的-node" class="headerlink" title="安装原生的 node"></a>安装原生的 node</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install node</span><br></pre></td></tr></table></figure><h2 id="升级为国内的taobao-版"><a href="#升级为国内的taobao-版" class="headerlink" title="升级为国内的taobao 版"></a>升级为国内的<a href="https://npm.taobao.org/" target="_blank" rel="noopener">taobao 版</a></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure><h2 id="node-版本管理"><a href="#node-版本管理" class="headerlink" title="node 版本管理"></a>node 版本管理</h2><blockquote><p>讲道理，n 超级好用</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm i -g n</span><br></pre></td></tr></table></figure><h1 id="VSCODE"><a href="#VSCODE" class="headerlink" title="VSCODE"></a>VSCODE</h1><blockquote><p>最强编辑器-之一</p></blockquote><p>安装插件可以参考以前的文章<a href="https://www.mizuka.top/2018/11/09/vscode%E6%8F%92%E4%BB%B6%E5%88%86%E4%BA%AB/">vscode 插件分享</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Mac-前端上手指南&quot;&gt;&lt;a href=&quot;#Mac-前端上手指南&quot; class=&quot;headerlink&quot; title=&quot;Mac 前端上手指南&quot;&gt;&lt;/a&gt;Mac 前端上手指南&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;MAC 是一个强大的生产力工具，但是因为 g*w 
      
    
    </summary>
    
      <category term="可以公开的情报" scheme="https://www.mizuka.top/categories/%E5%8F%AF%E4%BB%A5%E5%85%AC%E5%BC%80%E7%9A%84%E6%83%85%E6%8A%A5/"/>
    
    
      <category term="前端" scheme="https://www.mizuka.top/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="上手指南" scheme="https://www.mizuka.top/tags/%E4%B8%8A%E6%89%8B%E6%8C%87%E5%8D%97/"/>
    
      <category term="MAC" scheme="https://www.mizuka.top/tags/MAC/"/>
    
      <category term="经验" scheme="https://www.mizuka.top/tags/%E7%BB%8F%E9%AA%8C/"/>
    
  </entry>
  
  <entry>
    <title>我们是怎么从ng迁移到vue的</title>
    <link href="https://www.mizuka.top/2019/01/03/%E6%88%91%E4%BB%AC%E6%98%AF%E6%80%8E%E4%B9%88%E4%BB%8Eng%E8%BF%81%E7%A7%BB%E5%88%B0vue%E7%9A%84/"/>
    <id>https://www.mizuka.top/2019/01/03/我们是怎么从ng迁移到vue的/</id>
    <published>2019-01-03T21:41:57.000Z</published>
    <updated>2019-10-18T07:55:16.115Z</updated>
    
    <content type="html"><![CDATA[<h1 id="我们是如何从ng1迁移ing到vue的"><a href="#我们是如何从ng1迁移ing到vue的" class="headerlink" title="我们是如何从ng1迁移ing到vue的"></a>我们是如何从ng1迁移ing到vue的</h1><blockquote><p>原本的技术栈 ng1 + gulp + slim +<br>vue *2 + iframe 的一个后端管理项目</p></blockquote><p><a href="https://juejin.im/post/5c2e109fe51d453fdd604763" target="_blank" rel="noopener"><img src="https://badge.juejin.im/entry/5c2e10c7f265da613d7c31ee/likes.svg?style=flat-square" alt=""></a></p><p><img src="https://camo.githubusercontent.com/5082953bc69645086be2b2ac5e1a8fa20eff0314/68747470733a2f2f73696e676c652d7370612e6a732e6f72672f696d672f6c6f676f2d77686974652d6267626c75652e737667" alt=""></p><p>这是一个本身因为人手不足，一开始由后端同学创建的后端管理项目，基本采用了gulp + ng1来进行开发，同时前端接手之后为了方便开发以及跟上潮流，采用了新开子目录使用vue开发，nginx和iframe进行整合的方式，最后一个项目变成了三个项目，其实最开始进行开发的时候，连怎么启动都不知道😂</p><h1 id="要解决的问题"><a href="#要解决的问题" class="headerlink" title="要解决的问题"></a>要解决的问题</h1><h2 id="项目的层级结构"><a href="#项目的层级结构" class="headerlink" title="项目的层级结构"></a>项目的层级结构</h2><h3 id="原本的结构"><a href="#原本的结构" class="headerlink" title="原本的结构"></a>原本的结构</h3><p>顶级目录只包含多个子文件夹以及build.sh，每个子项目需要独立进行编译以及开发</p><h3 id="新的结构"><a href="#新的结构" class="headerlink" title="新的结构"></a>新的结构</h3><p>采用signle-spa作为入口文件解决方案，统一管理所有项目的入口文件，实现一次启动，所有项目都能一起开发以及编译，省去了来回切换以及端口冲突</p><h2 id="构建语言的混乱"><a href="#构建语言的混乱" class="headerlink" title="构建语言的混乱"></a>构建语言的混乱</h2><h3 id="原本的架构"><a href="#原本的架构" class="headerlink" title="原本的架构"></a>原本的架构</h3><p>原本的app是使用ng1来进行编写js部分，slim来编写页面模版，同时使用gulp来完成遍历所有的js文件，并打包到一个js中，后来一些新的页面部分采用iframe引入另一个vue-cli项目，两者之间通过cookie来进行登录数据的共享。</p><h3 id="更新之后的架构"><a href="#更新之后的架构" class="headerlink" title="更新之后的架构"></a>更新之后的架构</h3><p>因为模版文件的问题，仍然以gulp为主，webpack负责vue和原本app的js打包和资源文件的编译工作，大家约定好，原本的ng部分尽量不更新，新的采用vue进行编写</p><h2 id="逐步过渡"><a href="#逐步过渡" class="headerlink" title="逐步过渡"></a>逐步过渡</h2><h3 id="原本的方案"><a href="#原本的方案" class="headerlink" title="原本的方案"></a>原本的方案</h3><p>老的不管它，需要更新就回去更新，新的需求去vue的项目中编写</p><h3 id="现在的方案"><a href="#现在的方案" class="headerlink" title="现在的方案"></a>现在的方案</h3><p>single-spa进行页面的拆分，将需要更新的老的ng部分作为一个新的子app，拆分出来之后再进行更新，保证局部更新，不影响整体</p><h1 id="解决过程"><a href="#解决过程" class="headerlink" title="解决过程"></a>解决过程</h1><h2 id="编译工具"><a href="#编译工具" class="headerlink" title="编译工具"></a>编译工具</h2><p>确定了整体的迁移方案之后，就是首先对编译工具的改造了，最开始是想把gulp先替换成webpack的（因为习惯配置webpack了，以及webpack4 + babel7真的编译速度快了很多）</p><p>但是因为slim始终找不到适合使用的webpack插件的关系，最终决定还是保留gulp进行编译ng的相关的html文件</p><h3 id="小问题"><a href="#小问题" class="headerlink" title="小问题"></a>小问题</h3><h4 id="gulp支持webpack的问题"><a href="#gulp支持webpack的问题" class="headerlink" title="gulp支持webpack的问题"></a>gulp支持webpack的问题</h4><p>gulp-webpack插件支持的webpack版本是2，但是目标是使用4(为了快),好在webpack支持使用node来进行调用，只要在编译结束之后给gulp一个回调就可以了</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>)</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span> (<span class="params">webpackConfig</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> compiler = webpack(webpackConfig);</span><br><span class="line"></span><br><span class="line">    compiler.run(<span class="function">(<span class="params">err, stats</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="built_in">console</span>.error(err)</span><br><span class="line">        reject(err)</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 输出</span></span><br><span class="line">      process.stdout.write(stats.toString(&#123;</span><br><span class="line">        <span class="comment">// stats对象中保存着编译过程中的各种消息</span></span><br><span class="line">        colors: <span class="literal">true</span>, <span class="comment">// 增加控制台颜色开关</span></span><br><span class="line">        modules: <span class="literal">false</span>, <span class="comment">// 不增加内置模块信息</span></span><br><span class="line">        children: <span class="literal">false</span>, <span class="comment">// 不增加子级信息</span></span><br><span class="line">        chunks: <span class="literal">false</span>, <span class="comment">// 允许较少的输出</span></span><br><span class="line">        chunkModules: <span class="literal">false</span> <span class="comment">// 不将内置模块的信息加到包信息</span></span><br><span class="line">      &#125;) + <span class="string">'\n\n'</span>)</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    compiler.hooks.afterEmit.tap(<span class="string">'gulp'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      resolve()</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同理，devServer也使用自定义的脚本, 当然因为公司原因，其中的api切换也直接放在devServer的before中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * webpack的devserver</span><br><span class="line"> */</span><br><span class="line">const webpack = require(&quot;webpack&quot;);</span><br><span class="line">const WebpackDevServer = require(&quot;webpack-dev-server&quot;);</span><br><span class="line">const proxy = require(&quot;http-proxy-middleware&quot;);</span><br><span class="line"></span><br><span class="line">let env = &quot;dev&quot;; // 环境</span><br><span class="line"></span><br><span class="line">module.exports = function(config) &#123;</span><br><span class="line">  return new Promise((resolve, reject) =&gt; &#123;</span><br><span class="line">    // node模式下需要进行配置</span><br><span class="line">    let devServerConfig = config.devServer;</span><br><span class="line">    let devPath = `http://$&#123;devServerConfig.host&#125;:$&#123;devServerConfig.port&#125;/`;</span><br><span class="line">    config.entry.app.unshift(&quot;webpack/hot/dev-server&quot;);</span><br><span class="line">    config.entry.app.unshift(`webpack-dev-server/client?$&#123;devPath&#125;`);</span><br><span class="line"></span><br><span class="line">    const server = new WebpackDevServer(webpack(config), &#123;</span><br><span class="line">      open: devServerConfig.open,</span><br><span class="line">      contentBase: config.output.path,</span><br><span class="line">      publicPath: config.output.publicPath,</span><br><span class="line">      hot: true,</span><br><span class="line">      disableHostCheck: devServerConfig.disableHostCheck,</span><br><span class="line">      historyApiFallback: true,</span><br><span class="line">      inline: devServerConfig.inline,</span><br><span class="line">      watchContentBase: devServerConfig.watchContentBase,</span><br><span class="line">      before: function(app) &#123;</span><br><span class="line">        </span><br><span class="line">      &#125;,</span><br><span class="line">      stats: &#123;</span><br><span class="line">        colors: true</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    server.listen(devServerConfig.port, devServerConfig.host, function(err) &#123;</span><br><span class="line">      if (err) &#123;</span><br><span class="line">        console.log(err);</span><br><span class="line">        reject(err);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      console.log(`Listening at $&#123;devPath&#125;`);</span><br><span class="line">      resolve();</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="统一构建和开发"><a href="#统一构建和开发" class="headerlink" title="统一构建和开发"></a>统一构建和开发</h2><p>因为使用的语言不一样，负责的页面不一样，Store和Route也不一样，想要统一的话，就必须解决这些问题</p><h3 id="single-spa"><a href="#single-spa" class="headerlink" title="single-spa"></a>single-spa</h3><blockquote><p>SINGLE-SPA是一个 JavaScript 元框架，它允许我们使用不同的框架构建微前端，而这些框架可以共存于单个应用中。</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/2267652-a636f8d7cce8768f.png" alt=""><br>后端微服务架构（microservice style）已经流行了一段时间了，那么前端能不能同样使用微服务呢？页面拆分成不同的部分，互相之间互不干扰又紧密相连，single-spa正是为此而出现的，而且更好的事，single-spa支持几乎所有的前端开发框架，是一个框架的元框架，而我们的迁移目标正好就是将原本的ng部分拆分成一个个小的app然后逐步迁移到vue上么</p><h3 id="统一Store"><a href="#统一Store" class="headerlink" title="统一Store"></a>统一Store</h3><p>最终决定使用vuex作为整个项目的Store，但是如何与ng本身的rootScope进行整合就又是一个问题了，好在通过import引入的js文件的作用域是共同的，只需要将ng的rootScope挂载上vuex，然后vuex使用插件的形式反过来触发更新ng就行了. </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">'../store'</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.assign(store.state, &#123;</span><br><span class="line">    _ng: &#123;</span><br><span class="line">      $rootScope: $rootScope,</span><br><span class="line">      $state: $state</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 同步这些数据到ng的Scope里</span></span><br><span class="line"><span class="comment"> * @param store</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> ngPlugin = <span class="function"><span class="params">store</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 当 store 初始化后调用</span></span><br><span class="line">  store.subscribe(<span class="function">(<span class="params">&#123; type, payload &#125;, state</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (state._ng) &#123;</span><br><span class="line">      state._ng.$rootScope[type] = payload</span><br><span class="line">      state._ng.$rootScope.$apply()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="统一路由"><a href="#统一路由" class="headerlink" title="统一路由"></a>统一路由</h3><p>目前仍然各自为政，只不过路由跳转方式通过指令的方式，将vue和ng的跳转修改为使用single-spa的路由跳转方式. 当然，因为之前ng的路由是继续hash而不是history，所以还有一部分兼容操作</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; navigateToUrl &#125; <span class="keyword">from</span> <span class="string">'single-spa'</span></span><br><span class="line"></span><br><span class="line">directives: &#123;</span><br><span class="line">      <span class="comment">// spa链接</span></span><br><span class="line">      spaLink (element, &#123;value&#125;) &#123;</span><br><span class="line">        element.style.display = <span class="string">'inline-block'</span></span><br><span class="line">        element.style.width = <span class="string">'100%'</span></span><br><span class="line">        <span class="comment">// 自动判断hash类型</span></span><br><span class="line">        <span class="keyword">let</span> hash = (value || <span class="string">''</span>).includes(<span class="string">'#'</span>) ? value.replace(<span class="string">'/#'</span>, <span class="string">'#'</span>) : <span class="string">`#/<span class="subst">$&#123;value&#125;</span>`</span></span><br><span class="line">        element.setAttribute(<span class="string">'href'</span>, value ? hash : <span class="string">'javascript:void(0)'</span>)</span><br><span class="line">        element.addEventListener(<span class="string">'click'</span>, (e) =&gt; &#123;</span><br><span class="line">          e.preventDefault()</span><br><span class="line">          <span class="keyword">if</span> (value) &#123;</span><br><span class="line">            navigateToUrl(hash)</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br></pre></td></tr></table></figure><h3 id="目录结构统一"><a href="#目录结构统一" class="headerlink" title="目录结构统一"></a>目录结构统一</h3><p>使用webpack的一个好处就是可以使用alias的方式 引入vue的相关组件，将原先平级的目录都移入src之后，只要修改alias，就能做到无缝迁移了</p><h3 id="拆分app"><a href="#拆分app" class="headerlink" title="拆分app"></a>拆分app</h3><p>没什么好说的，按照业务相关性和优先级拆分，使用single-spa进行管理</p><h1 id="目前进度"><a href="#目前进度" class="headerlink" title="目前进度"></a>目前进度</h1><p>当然啦，迁移也不是一朝一夕的事，其实主要把整个项目的侧边栏导航栏给换了，支持了一直吵着要做的搜索框，更换的过程中还出过不少问题，不过因为拆分了app，倒是没有影响整个项目的正常运行，看来迁移有望，起码现在启动项目不用各种切分支了😂，同时因为偷懒，还专门写了seed系统，通过定义数据结构快速生成项目页面，这也是后话了</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;我们是如何从ng1迁移ing到vue的&quot;&gt;&lt;a href=&quot;#我们是如何从ng1迁移ing到vue的&quot; class=&quot;headerlink&quot; title=&quot;我们是如何从ng1迁移ing到vue的&quot;&gt;&lt;/a&gt;我们是如何从ng1迁移ing到vue的&lt;/h1&gt;&lt;bloc
      
    
    </summary>
    
      <category term="可以公开的情报" scheme="https://www.mizuka.top/categories/%E5%8F%AF%E4%BB%A5%E5%85%AC%E5%BC%80%E7%9A%84%E6%83%85%E6%8A%A5/"/>
    
    
      <category term="经验" scheme="https://www.mizuka.top/tags/%E7%BB%8F%E9%AA%8C/"/>
    
      <category term="vue" scheme="https://www.mizuka.top/tags/vue/"/>
    
      <category term="ng" scheme="https://www.mizuka.top/tags/ng/"/>
    
      <category term="迁移" scheme="https://www.mizuka.top/tags/%E8%BF%81%E7%A7%BB/"/>
    
      <category term="angularJs" scheme="https://www.mizuka.top/tags/angularJs/"/>
    
  </entry>
  
  <entry>
    <title>RTAC86U刷机指南</title>
    <link href="https://www.mizuka.top/2018/12/15/RTAC86U%E5%88%B7%E6%9C%BA%E6%8C%87%E5%8D%97/"/>
    <id>https://www.mizuka.top/2018/12/15/RTAC86U刷机指南/</id>
    <published>2018-12-15T17:32:01.000Z</published>
    <updated>2019-10-18T07:55:16.111Z</updated>
    
    <content type="html"><![CDATA[<h1 id="搬家之后当然要换一个更好的路由器啦"><a href="#搬家之后当然要换一个更好的路由器啦" class="headerlink" title="搬家之后当然要换一个更好的路由器啦"></a>搬家之后当然要换一个更好的路由器啦</h1><blockquote><p>koolshare看到的推荐，新的架构 还是华硕出品趁着双十二就入手啦</p></blockquote><p><img src="https://mizuka-blog.oss-cn-shanghai.aliyuncs.com/rtac86u/IMG_4420.jpeg" alt=""></p><p>当然只是选择了一个最简单的刷机方式，原版刷官改<br>具体直接参考<a href="http://koolshare.cn/thread-139965-1-1.html" target="_blank" rel="noopener">原版帖子</a></p><h2 id="特色"><a href="#特色" class="headerlink" title="特色"></a>特色</h2><ol><li>同步华硕官方代码 </li><li>koolshare软件中心支持</li><li>ROG信仰皮肤加成</li></ol><h1 id="刷机方法"><a href="#刷机方法" class="headerlink" title="刷机方法"></a>刷机方法</h1><p>在固件升级页面下直接上传.w 后缀的固件文件</p><h2 id="固件下载"><a href="#固件下载" class="headerlink" title="固件下载"></a>固件下载</h2><p>384_32799<br>MD5: 3E477C01D18CD455362B61DCCBF33652<br>SHA1: A2C496EE545A94EADAC4CEC3C9B3A381B1B4ABB2<br><a href="http://firmware.koolshare.cn/Koolshare_ASUS_Official_Mod/RT-AC86U_3.0.0.4.384.32799/RT-AC86U_384_32799_koolshare_cferom_ubi.w" target="_blank" rel="noopener">http://firmware.koolshare.cn/Koolshare_ASUS_Official_Mod/RT-AC86U_3.0.0.4.384.32799/RT-AC86U_384_32799_koolshare_cferom_ubi.w</a></p><h2 id="刷虚拟内存"><a href="#刷虚拟内存" class="headerlink" title="刷虚拟内存"></a>刷虚拟内存</h2><blockquote><p>这个路由器最大的问题在于架构变更之后，内存占的很厉害，所以需要刷官改的另一个原因就是需要安装虚拟内存</p></blockquote><p>虚拟内存需要挂载一个格式为ext4（ext3）的u盘</p><h3 id="格式化的方法"><a href="#格式化的方法" class="headerlink" title="格式化的方法"></a>格式化的方法</h3><h4 id="osx"><a href="#osx" class="headerlink" title="osx"></a>osx</h4><p>如果没有 Homebrew 的话，需要先安装 Homebrew：</p><p>/usr/bin/ruby -e “$(curl -fsSL <a href="https://raw.githubusercontent.com/Homebrew/install/master/install)&quot;" target="_blank" rel="noopener">https://raw.githubusercontent.com/Homebrew/install/master/install)&quot;</a></p><p>安装 e2fsprogs</p><p>brew install e2fsprogs</p><p>把 U 盘插到 Mac 上，执行：</p><p>diskutil list</p><p>找到自己 U 盘的盘符，比如我这里是：/dev/disk3s1，</p><figure class="highlight plain"><figcaption><span>(external, physical):</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#:                       TYPE NAME                    SIZE       IDENTIFIER</span><br><span class="line">0:     FDisk_partition_scheme                        *30.8 GB    disk3</span><br><span class="line">1:             Windows_FAT_32 SANDISK                 30.8 GB    disk3s1</span><br></pre></td></tr></table></figure><p>然后执行格式化：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">diskutil unmountdisk /dev/disk3s1</span><br><span class="line">sudo $(brew --prefix e2fsprogs)/sbin/mkfs.ext4 /dev/disk3s1</span><br></pre></td></tr></table></figure><p>执行命令后会要求输入用户密码，然后输入 y 确认。</p><h4 id="win"><a href="#win" class="headerlink" title="win"></a>win</h4><p>下一个<a href="https://www.minitool.com/" target="_blank" rel="noopener">minitools</a></p><h3 id="加虚拟内存"><a href="#加虚拟内存" class="headerlink" title="加虚拟内存"></a>加虚拟内存</h3><p><img src="https://image.koolshare.cn/attachment/forum/201805/18/180949ce1sxrpcmqcxxyep.jpg" alt="软件中心"><br>进软件中心下载就好啦</p><h1 id="重点，不可描述，红色小飞机插件"><a href="#重点，不可描述，红色小飞机插件" class="headerlink" title="重点，不可描述，红色小飞机插件"></a>重点，不可描述，红色小飞机插件</h1><p><a href="https://github.com/hq450/fancyss" target="_blank" rel="noopener">gayhub</a> 注意架构，下载完了之后离线安装</p><p>have a nice day</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;搬家之后当然要换一个更好的路由器啦&quot;&gt;&lt;a href=&quot;#搬家之后当然要换一个更好的路由器啦&quot; class=&quot;headerlink&quot; title=&quot;搬家之后当然要换一个更好的路由器啦&quot;&gt;&lt;/a&gt;搬家之后当然要换一个更好的路由器啦&lt;/h1&gt;&lt;blockquote&gt;

      
    
    </summary>
    
      <category term="可以公开的情报" scheme="https://www.mizuka.top/categories/%E5%8F%AF%E4%BB%A5%E5%85%AC%E5%BC%80%E7%9A%84%E6%83%85%E6%8A%A5/"/>
    
    
      <category term="RTAC86U" scheme="https://www.mizuka.top/tags/RTAC86U/"/>
    
      <category term="乳酸菌" scheme="https://www.mizuka.top/tags/%E4%B9%B3%E9%85%B8%E8%8F%8C/"/>
    
      <category term="gfw" scheme="https://www.mizuka.top/tags/gfw/"/>
    
      <category term="插件" scheme="https://www.mizuka.top/tags/%E6%8F%92%E4%BB%B6/"/>
    
  </entry>
  
</feed>
