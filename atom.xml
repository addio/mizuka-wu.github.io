<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>水华的博客</title>
  
  <subtitle>知行合一</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.mizuka.top/"/>
  <updated>2019-07-09T03:09:08.461Z</updated>
  <id>https://www.mizuka.top/</id>
  
  <author>
    <name>Mizuka</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Android如何直接投屏到电脑</title>
    <link href="https://www.mizuka.top/2019/07/09/Android%E5%A6%82%E4%BD%95%E7%9B%B4%E6%8E%A5%E6%8A%95%E5%B1%8F%E5%88%B0%E7%94%B5%E8%84%91/"/>
    <id>https://www.mizuka.top/2019/07/09/Android如何直接投屏到电脑/</id>
    <published>2019-07-09T18:17:35.000Z</published>
    <updated>2019-07-09T03:09:08.461Z</updated>
    
    <content type="html"><![CDATA[<h1 id="安装scycpy"><a href="#安装scycpy" class="headerlink" title="安装scycpy"></a>安装scycpy</h1><p><code>brew install scycpy</code><br>连接上安卓手机之后就行</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;安装scycpy&quot;&gt;&lt;a href=&quot;#安装scycpy&quot; class=&quot;headerlink&quot; title=&quot;安装scycpy&quot;&gt;&lt;/a&gt;安装scycpy&lt;/h1&gt;&lt;p&gt;&lt;code&gt;brew install scycpy&lt;/code&gt;&lt;br&gt;连接上安卓手机之后就
      
    
    </summary>
    
    
      <category term="可以公开的情报" scheme="https://www.mizuka.top/tags/%E5%8F%AF%E4%BB%A5%E5%85%AC%E5%BC%80%E7%9A%84%E6%83%85%E6%8A%A5/"/>
    
      <category term="开发" scheme="https://www.mizuka.top/tags/%E5%BC%80%E5%8F%91/"/>
    
      <category term="前端" scheme="https://www.mizuka.top/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="android" scheme="https://www.mizuka.top/tags/android/"/>
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://www.mizuka.top/2019/07/09/RN2Flutter/"/>
    <id>https://www.mizuka.top/2019/07/09/RN2Flutter/</id>
    <published>2019-07-09T03:09:08.461Z</published>
    <updated>2019-07-09T03:09:08.461Z</updated>
    
    <content type="html"><![CDATA[<h1 id="RN2Flutter"><a href="#RN2Flutter" class="headerlink" title="RN2Flutter"></a>RN2Flutter</h1><h2 id="Flutter环境安装"><a href="#Flutter环境安装" class="headerlink" title="Flutter环境安装"></a>Flutter环境安装</h2><p>fultter需要安装配置环境，主要是dart和flutter，vscode需要安装flutter插件</p><h3 id="dart"><a href="#dart" class="headerlink" title="dart"></a>dart</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">brew tap dart-lang/dart</span><br><span class="line">brew install dart</span><br></pre></td></tr></table></figure><p>dart 安装完成</p><h3 id="Flutter"><a href="#Flutter" class="headerlink" title="Flutter"></a>Flutter</h3><p>使用第三方传入到brew的镜像进行安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">brew tap MiderWong/flutter</span><br><span class="line">brew install flutter</span><br></pre></td></tr></table></figure><h3 id="其他依赖"><a href="#其他依赖" class="headerlink" title="其他依赖"></a>其他依赖</h3><p>设定依赖为国内镜像之后进行自动安装即可<br>.zshrc .bash_profile都需要加</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> PUB_HOSTED_URL=https://dart-pub.mirrors.sjtug.sjtu.edu.cn</span><br><span class="line"><span class="built_in">export</span> FLUTTER_STORAGE_BASE_URL=https://mirrors.sjtug.sjtu.edu.cn</span><br><span class="line">flutter doctor</span><br></pre></td></tr></table></figure><p>之后按照提示修复即可<br>ps: cocoa太慢的话看<a href="http://www.cnblogs.com/zhuyanboyue/p/6118950.html" target="_blank" rel="noopener">这个</a></p><h3 id="杀进程"><a href="#杀进程" class="headerlink" title="杀进程"></a>杀进程</h3><p><code>ps aux|grep flutter|awk &#39;{print $2}&#39;|xargs kill -9</code></p><h3 id="各种问题解决"><a href="#各种问题解决" class="headerlink" title="各种问题解决"></a>各种问题解决</h3><p><a href="https://www.itfanr.cc/2019/03/08/flutter-devemopment-environment-configuration/" target="_blank" rel="noopener">url</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;RN2Flutter&quot;&gt;&lt;a href=&quot;#RN2Flutter&quot; class=&quot;headerlink&quot; title=&quot;RN2Flutter&quot;&gt;&lt;/a&gt;RN2Flutter&lt;/h1&gt;&lt;h2 id=&quot;Flutter环境安装&quot;&gt;&lt;a href=&quot;#Flutter环境安
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>webpack正确的引入pdf.js</title>
    <link href="https://www.mizuka.top/2019/07/09/webpack%E6%AD%A3%E7%A1%AE%E7%9A%84%E5%BC%95%E5%85%A5pdfjs/"/>
    <id>https://www.mizuka.top/2019/07/09/webpack正确的引入pdfjs/</id>
    <published>2019-07-09T03:09:08.461Z</published>
    <updated>2019-07-09T03:09:08.461Z</updated>
    
    <content type="html"><![CDATA[<h1 id="pdf-js"><a href="#pdf-js" class="headerlink" title="pdf.js"></a>pdf.js</h1><p>废话不多说,直接上代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pdfjs <span class="keyword">from</span> <span class="string">'pdfjs-dist/webpack'</span></span><br></pre></td></tr></table></figure><p>简单明了，不用考虑 pdf.worker.js,不用考虑 cdn</p><h2 id="附上最近做的-pdf-生成和导出的两个库的基础配置"><a href="#附上最近做的-pdf-生成和导出的两个库的基础配置" class="headerlink" title="附上最近做的 pdf 生成和导出的两个库的基础配置"></a>附上最近做的 pdf 生成和导出的两个库的基础配置</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pdfMake <span class="keyword">from</span> <span class="string">'pdfmake-support-chinese-fonts/pdfmake.min'</span></span><br><span class="line"><span class="keyword">import</span> pdfFonts <span class="keyword">from</span> <span class="string">'pdfmake-support-chinese-fonts/vfs_fonts'</span></span><br><span class="line"><span class="keyword">import</span> pdfjs <span class="keyword">from</span> <span class="string">'pdfjs-dist/webpack'</span></span><br><span class="line">pdfMake.vfs = pdfFonts.pdfMake.vfs</span><br><span class="line">pdfMake.fonts = &#123;</span><br><span class="line">  Roboto: &#123;</span><br><span class="line">    normal: <span class="string">'Roboto-Regular.ttf'</span>,</span><br><span class="line">    bold: <span class="string">'Roboto-Regular.ttf'</span>,</span><br><span class="line">    italics: <span class="string">'Roboto-Regular.ttf'</span>,</span><br><span class="line">    bolditalics: <span class="string">'Roboto-Regular.ttf'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  fangzhen: &#123;</span><br><span class="line">    normal: <span class="string">'fzhei-jt.TTF'</span>,</span><br><span class="line">    bold: <span class="string">'fzhei-jt.TTF'</span>,</span><br><span class="line">    italics: <span class="string">'fzhei-jt.TTF'</span>,</span><br><span class="line">    bolditalics: <span class="string">'fzhei-jt.TTF'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> pdfMaker = pdfMake</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> pdfViewer = pdfjs</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;pdf-js&quot;&gt;&lt;a href=&quot;#pdf-js&quot; class=&quot;headerlink&quot; title=&quot;pdf.js&quot;&gt;&lt;/a&gt;pdf.js&lt;/h1&gt;&lt;p&gt;废话不多说,直接上代码&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;
      
    
    </summary>
    
      <category term="开发的捷径" scheme="https://www.mizuka.top/categories/%E5%BC%80%E5%8F%91%E7%9A%84%E6%8D%B7%E5%BE%84/"/>
    
    
      <category term="笔记" scheme="https://www.mizuka.top/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="学习" scheme="https://www.mizuka.top/tags/%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="记录" scheme="https://www.mizuka.top/tags/%E8%AE%B0%E5%BD%95/"/>
    
      <category term="vscode" scheme="https://www.mizuka.top/tags/vscode/"/>
    
  </entry>
  
  <entry>
    <title>一次node内存泄漏的调查</title>
    <link href="https://www.mizuka.top/2019/06/15/%E4%B8%80%E6%AC%A1node%E5%86%85%E5%AD%98%E6%B3%84%E6%BC%8F%E8%B0%83%E6%9F%A5/"/>
    <id>https://www.mizuka.top/2019/06/15/一次node内存泄漏调查/</id>
    <published>2019-06-15T11:41:57.000Z</published>
    <updated>2019-07-09T03:09:08.461Z</updated>
    
    <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>公司需要对接各种渠道，进行渠道管理进行了统一规范，生成了 渠道管理 这个类，上线后发现一直报警，内存居高不下，而且走势呈阶梯上升，判断发生了内存泄漏</p><h2 id="技术栈"><a href="#技术栈" class="headerlink" title="技术栈"></a>技术栈</h2><h3 id="Nuxt"><a href="#Nuxt" class="headerlink" title="Nuxt"></a>Nuxt</h3><p>基于 nuxt 和 vue 开发的一套前端代码</p><h3 id="nodejs-性能平台"><a href="#nodejs-性能平台" class="headerlink" title="nodejs 性能平台"></a>nodejs 性能平台</h3><p>alinode，一个 ali 官方出的用来监控整个 node 内存和机器运行情况的程序，非常好用，问题是数据有一定延时</p><h2 id="解决的步骤"><a href="#解决的步骤" class="headerlink" title="解决的步骤"></a>解决的步骤</h2><h3 id="首先尝试临时解决问题"><a href="#首先尝试临时解决问题" class="headerlink" title="首先尝试临时解决问题"></a>首先尝试临时解决问题</h3><p>因为线上一共有四台机器跑 ssr，所以通过设置不同的 crontab 进行分批重启 pm2，使得服务不间断</p><h3 id="下线问题的-feture"><a href="#下线问题的-feture" class="headerlink" title="下线问题的 feture"></a>下线问题的 feture</h3><p>最近上线的 feture 只有 渠道管理，于是回滚代码之后重新发布，发现问题解决，找到问题代码区域</p><h3 id="CodeReview"><a href="#CodeReview" class="headerlink" title="CodeReview"></a>CodeReview</h3><p>开会大家回顾整个问题代码，分析之后发现可能的问题在于使用了 global 的 mixin，改成 Vue plugin 的形式使用，具体可以参考<a href="https://github.com/vuejs/vue/issues/5089#issuecomment-284260111" target="_blank" rel="noopener">这个 issue</a><br>测试环境下发现问题依旧没有解决</p><h3 id="验尸"><a href="#验尸" class="headerlink" title="验尸"></a>验尸</h3><p>对比了最近几次 alinode 抓下的堆快照，发现所有的闭包都是 vue 实例，而且都会有一个同样的 key,这个 key 正好是 nuxt 的插件 inject 之后的 key 名</p><h3 id="找出问题所在"><a href="#找出问题所在" class="headerlink" title="找出问题所在"></a>找出问题所在</h3><p>最终发现是上 渠道管理 的时候在 nuxt 的 plugin 中使用了 inject，因为 inject 的时候是同一个实例，本身的目的是可以获取 渠道 列表</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = <span class="function">(<span class="params">ctx, inject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> 渠道管理 = <span class="built_in">require</span>(<span class="string">'渠道管理'</span>)</span><br><span class="line">  inject(<span class="string">'渠道管理'</span>, 渠道管理)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h2><p>在于 v8 的整个 gc 机制在于是否能够被访问到，因为 inject 之后不知道为何从 渠道管理 能够访问到所有 inject 之后的 vue 实例，所以这一系列的 vue 对象都不可被回收</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h1&gt;&lt;p&gt;公司需要对接各种渠道，进行渠道管理进行了统一规范，生成了 渠道管理 这个类，上线后发现一直报警，内存居高不下，而且走势呈阶梯上升，判断发生了
      
    
    </summary>
    
      <category term="可以公开的情报" scheme="https://www.mizuka.top/categories/%E5%8F%AF%E4%BB%A5%E5%85%AC%E5%BC%80%E7%9A%84%E6%83%85%E6%8A%A5/"/>
    
    
      <category term="前端" scheme="https://www.mizuka.top/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="经验" scheme="https://www.mizuka.top/tags/%E7%BB%8F%E9%AA%8C/"/>
    
  </entry>
  
  <entry>
    <title>一次node内存泄漏排查和解决</title>
    <link href="https://www.mizuka.top/2019/06/10/%E4%B8%80%E6%AC%A1node%E5%86%85%E5%AD%98%E6%B3%84%E6%BC%8F%E6%8E%92%E6%9F%A5%E5%92%8C%E8%A7%A3%E5%86%B3/"/>
    <id>https://www.mizuka.top/2019/06/10/一次node内存泄漏排查和解决/</id>
    <published>2019-06-10T10:41:57.000Z</published>
    <updated>2019-07-09T03:09:08.461Z</updated>
    
    <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>公司需要对接各种渠道，进行渠道管理进行了统一规范，生成了 ChannelManager 这个类，上线后发现一直报警，内存居高不下，而且走势呈阶梯上升，判断发生了内存泄漏</p><h2 id="技术栈"><a href="#技术栈" class="headerlink" title="技术栈"></a>技术栈</h2><h3 id="Nuxt"><a href="#Nuxt" class="headerlink" title="Nuxt"></a>Nuxt</h3><p>基于 nuxt 和 vue 开发的一套前端代码</p><h3 id="nodejs-性能平台"><a href="#nodejs-性能平台" class="headerlink" title="nodejs 性能平台"></a>nodejs 性能平台</h3><p>alinode，一个 ali 官方出的用来监控整个 node 内存和机器运行情况的程序，非常好用，问题是数据有一定延时</p><h2 id="解决的步骤"><a href="#解决的步骤" class="headerlink" title="解决的步骤"></a>解决的步骤</h2><h3 id="首先尝试临时解决问题"><a href="#首先尝试临时解决问题" class="headerlink" title="首先尝试临时解决问题"></a>首先尝试临时解决问题</h3><p>因为线上一共有四台机器跑 ssr，所以通过设置不同的 crontab 进行分批重启 pm2，使得服务不间断</p><h3 id="下线问题的-feture"><a href="#下线问题的-feture" class="headerlink" title="下线问题的 feture"></a>下线问题的 feture</h3><p>最近上线的 feture 只有 channelManager，于是回滚代码之后重新发布，发现问题解决，找到问题代码区域</p><h3 id="CodeReview"><a href="#CodeReview" class="headerlink" title="CodeReview"></a>CodeReview</h3><p>开会大家回顾整个问题代码，分析之后发现可能的问题在于使用了 global 的 mixin，改成 Vue plugin 的形式使用，具体可以参考<a href="https://github.com/vuejs/vue/issues/5089#issuecomment-284260111" target="_blank" rel="noopener">这个 issue</a><br>测试环境下发现问题依旧没有解决</p><h3 id="验尸"><a href="#验尸" class="headerlink" title="验尸"></a>验尸</h3><p>对比了最近几次 alinode 抓下的堆快照，发现所有的闭包都是 vue 实例，而且都会有一个同样的 key<code>$channelManager</code></p><h3 id="找出问题所在"><a href="#找出问题所在" class="headerlink" title="找出问题所在"></a>找出问题所在</h3><p>最终发现是上 channelManager 的时候在 nuxt 的 plugin 中使用了 inject，因为 inject 的时候是同一个实例，本身的目的是可以获取 channel 列表</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = <span class="function">(<span class="params">ctx, inject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> ChannelManager = <span class="built_in">require</span>(<span class="string">'ChannelManager'</span>)</span><br><span class="line">  inject(<span class="string">'channelManager'</span>, ChannelManager)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h2><p>在于 v8 的整个 gc 机制在于是否能够被访问到，因为 inject 之后不知道为何从 channelManager 能够访问到所有 inject 之后的 vue 实例，所以这一系列的 vue 对象都不可被回收</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h1&gt;&lt;p&gt;公司需要对接各种渠道，进行渠道管理进行了统一规范，生成了 ChannelManager 这个类，上线后发现一直报警，内存居高不下，而且走势呈
      
    
    </summary>
    
      <category term="可以公开的情报" scheme="https://www.mizuka.top/categories/%E5%8F%AF%E4%BB%A5%E5%85%AC%E5%BC%80%E7%9A%84%E6%83%85%E6%8A%A5/"/>
    
    
      <category term="前端" scheme="https://www.mizuka.top/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="经验" scheme="https://www.mizuka.top/tags/%E7%BB%8F%E9%AA%8C/"/>
    
  </entry>
  
  <entry>
    <title>如何删除除了Master之外的所有分支</title>
    <link href="https://www.mizuka.top/2019/06/05/%E5%A6%82%E4%BD%95%E5%88%A0%E9%99%A4%E9%99%A4%E4%BA%86Master%E4%B9%8B%E5%A4%96%E7%9A%84%E6%89%80%E6%9C%89%E5%88%86%E6%94%AF/"/>
    <id>https://www.mizuka.top/2019/06/05/如何删除除了Master之外的所有分支/</id>
    <published>2019-06-05T11:41:57.000Z</published>
    <updated>2019-07-09T03:09:08.461Z</updated>
    
    <content type="html"><![CDATA[<h1 id="如何删除除了-Master-之外的所有分支"><a href="#如何删除除了-Master-之外的所有分支" class="headerlink" title="如何删除除了 Master 之外的所有分支"></a>如何删除除了 Master 之外的所有分支</h1><ol><li>切换到 master</li><li>删了其他的</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git stash &amp;&amp; git checkout master &amp;&amp; git branch | grep -v <span class="string">"master"</span> | xargs git branch -D</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;如何删除除了-Master-之外的所有分支&quot;&gt;&lt;a href=&quot;#如何删除除了-Master-之外的所有分支&quot; class=&quot;headerlink&quot; title=&quot;如何删除除了 Master 之外的所有分支&quot;&gt;&lt;/a&gt;如何删除除了 Master 之外的所有分支&lt;/
      
    
    </summary>
    
      <category term="可以公开的情报" scheme="https://www.mizuka.top/categories/%E5%8F%AF%E4%BB%A5%E5%85%AC%E5%BC%80%E7%9A%84%E6%83%85%E6%8A%A5/"/>
    
    
      <category term="前端" scheme="https://www.mizuka.top/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="上手指南" scheme="https://www.mizuka.top/tags/%E4%B8%8A%E6%89%8B%E6%8C%87%E5%8D%97/"/>
    
      <category term="MAC" scheme="https://www.mizuka.top/tags/MAC/"/>
    
      <category term="经验" scheme="https://www.mizuka.top/tags/%E7%BB%8F%E9%AA%8C/"/>
    
  </entry>
  
  <entry>
    <title>有关前端和pdf相关的几件事</title>
    <link href="https://www.mizuka.top/2019/04/10/%E6%9C%89%E5%85%B3%E5%89%8D%E7%AB%AF%E5%92%8Cpdf%E7%9B%B8%E5%85%B3%E7%9A%84%E5%87%A0%E4%BB%B6%E4%BA%8B/"/>
    <id>https://www.mizuka.top/2019/04/10/有关前端和pdf相关的几件事/</id>
    <published>2019-04-10T13:46:10.000Z</published>
    <updated>2019-07-09T03:09:08.465Z</updated>
    
    <content type="html"><![CDATA[<h1 id="有关前端和pdf相关的几件事"><a href="#有关前端和pdf相关的几件事" class="headerlink" title="有关前端和pdf相关的几件事"></a>有关前端和pdf相关的几件事</h1><blockquote><p>pdf（Portable Document Format的简称，意为“便携式文档格式”）</p></blockquote><p>前端工作中，也避免不了要和pdf打交道，以下列一些相关的信息</p><h2 id="预览pdf的方法"><a href="#预览pdf的方法" class="headerlink" title="预览pdf的方法"></a>预览pdf的方法</h2><h3 id="通过浏览器自己的能力"><a href="#通过浏览器自己的能力" class="headerlink" title="通过浏览器自己的能力"></a>通过浏览器自己的能力</h3><ol><li><p>直接<figure class="highlight plain"><figcaption><span>href</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2. iframe/object ```&lt;iframe src=&quot;pdf地址&quot;&gt;</span><br></pre></td></tr></table></figure></p></li><li><p>embed <code>&lt;embed :src=&quot;previewUrl&quot; type=&quot;application/pdf&quot;</code></p></li></ol><p>以上几种方法都存在<a href="https://segmentfault.com/a/1190000015597029" target="_blank" rel="noopener">跨域</a>问题<br>当然其中pdf浏览器的样式都是浏览器自带的，如果想要自定义，可能会比较无力</p><h3 id="通过相关的库"><a href="#通过相关的库" class="headerlink" title="通过相关的库"></a>通过相关的库</h3><ol><li><a href="https://pdfobject.com/" target="_blank" rel="noopener">pdfobject</a> 其实也是基于embed方案的</li><li><a href="https://mozilla.github.io/pdf.js/" target="_blank" rel="noopener">pdf.js</a> pdfjs适用于自定义显示方案的，但是依赖webworker，兼容性可能不行</li></ol><h4 id="pdf-js"><a href="#pdf-js" class="headerlink" title="pdf.js"></a>pdf.js</h4><p>pdf.js 如果是通过npm安装的话，可能会遇到import相关的问题，这个时候改用<code>pdfjs-dist/webpack</code>就可以正常引入啦，不过包比较大，还是建议使用cdn</p><h2 id="生成pdf的方法"><a href="#生成pdf的方法" class="headerlink" title="生成pdf的方法"></a>生成pdf的方法</h2><p>有通过前端/后端等多种方法，生成的pdf也分为纯图片/文字+图片的类型</p><h3 id="通过后端"><a href="#通过后端" class="headerlink" title="通过后端"></a>通过后端</h3><ol><li><a href="https://github.com/GoogleChrome/puppeteer/blob/v1.14.0/docs/api.md" target="_blank" rel="noopener">puppeteer</a> 无头浏览器，网页生成pdf</li><li>jsPdf + html2canvas, 页面生成图片之后扔进jsPdf中</li><li>jsPdf, 纯js方案生成，缺点是需要自己计算每个元素的位置</li><li><a href="http://pdfmake.org/#/" target="_blank" rel="noopener">pdfmake</a> 通过定义js对象来进行pdf,缺点是引入字体包导致整个依赖比较大，体验上比较好</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;有关前端和pdf相关的几件事&quot;&gt;&lt;a href=&quot;#有关前端和pdf相关的几件事&quot; class=&quot;headerlink&quot; title=&quot;有关前端和pdf相关的几件事&quot;&gt;&lt;/a&gt;有关前端和pdf相关的几件事&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;pdf（Porta
      
    
    </summary>
    
      <category term="可以公开的情报" scheme="https://www.mizuka.top/categories/%E5%8F%AF%E4%BB%A5%E5%85%AC%E5%BC%80%E7%9A%84%E6%83%85%E6%8A%A5/"/>
    
    
      <category term="教程" scheme="https://www.mizuka.top/tags/%E6%95%99%E7%A8%8B/"/>
    
      <category term="javascript" scheme="https://www.mizuka.top/tags/javascript/"/>
    
      <category term="pdf" scheme="https://www.mizuka.top/tags/pdf/"/>
    
  </entry>
  
  <entry>
    <title>axios如何中断请求</title>
    <link href="https://www.mizuka.top/2019/03/29/axios%E5%A6%82%E4%BD%95%E4%B8%AD%E6%96%AD%E8%AF%B7%E6%B1%82/"/>
    <id>https://www.mizuka.top/2019/03/29/axios如何中断请求/</id>
    <published>2019-03-29T11:41:57.000Z</published>
    <updated>2019-07-09T03:09:08.461Z</updated>
    
    <content type="html"><![CDATA[<h1 id="axios-如何中断请求"><a href="#axios-如何中断请求" class="headerlink" title="axios 如何中断请求"></a>axios 如何中断请求</h1><p>axios 是一个非常方便的请求库，但是缺没有原生提供一个 abort 接口，因为 axios 的返回是一个 promise，我们可以利用 promise 的特性来实现一个 abort 方法</p><h2 id="Promise-race"><a href="#Promise-race" class="headerlink" title="Promise.race"></a>Promise.race</h2><p>promise.race 方法从字面意思上就是赛跑，其中只要有任意一个完成了，就返回完成的那个，有一个失败了，就改为失败，利用这个特性就能完成我们的 abort 方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Promise</span>.race([</span><br><span class="line">        <span class="comment">// 等待取消组</span></span><br><span class="line">        <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">_resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">          notify.onClose = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            reject(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'手动停止导出！'</span>))</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;),</span><br><span class="line">        <span class="comment">// 获取数据组</span></span><br><span class="line">        axios.get()</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>当然，例子中利用了 element-ui 的 notify 组件，绑定了 notify 组件的 onClose 方法，实际上也可以通过封装对象的方式实现</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;axios-如何中断请求&quot;&gt;&lt;a href=&quot;#axios-如何中断请求&quot; class=&quot;headerlink&quot; title=&quot;axios 如何中断请求&quot;&gt;&lt;/a&gt;axios 如何中断请求&lt;/h1&gt;&lt;p&gt;axios 是一个非常方便的请求库，但是缺没有原生提供一个 
      
    
    </summary>
    
      <category term="可以公开的情报" scheme="https://www.mizuka.top/categories/%E5%8F%AF%E4%BB%A5%E5%85%AC%E5%BC%80%E7%9A%84%E6%83%85%E6%8A%A5/"/>
    
    
      <category term="前端" scheme="https://www.mizuka.top/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="上手指南" scheme="https://www.mizuka.top/tags/%E4%B8%8A%E6%89%8B%E6%8C%87%E5%8D%97/"/>
    
      <category term="MAC" scheme="https://www.mizuka.top/tags/MAC/"/>
    
      <category term="经验" scheme="https://www.mizuka.top/tags/%E7%BB%8F%E9%AA%8C/"/>
    
  </entry>
  
  <entry>
    <title>Mac前端上手指南</title>
    <link href="https://www.mizuka.top/2019/02/11/Mac%E5%89%8D%E7%AB%AF%E4%B8%8A%E6%89%8B%E6%8C%87%E5%8D%97/"/>
    <id>https://www.mizuka.top/2019/02/11/Mac前端上手指南/</id>
    <published>2019-02-11T11:41:57.000Z</published>
    <updated>2019-07-09T03:09:08.461Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Mac-前端上手指南"><a href="#Mac-前端上手指南" class="headerlink" title="Mac 前端上手指南"></a>Mac 前端上手指南</h1><blockquote><p>MAC 是一个强大的生产力工具，但是因为 g*w 的原因以及网速的原因，还是需要一些优化和调整的</p></blockquote><p><a href="https://juejin.im/post/5c60eb5f51882524c84efba3" target="_blank" rel="noopener"><img src="https://badge.juejin.im/entry/5c60eb815188256283253592/likes.svg?style=flat-square" alt=""></a></p><h1 id="Homebrew"><a href="#Homebrew" class="headerlink" title="Homebrew"></a><a href="https://brew.sh/" target="_blank" rel="noopener">Homebrew</a></h1><blockquote><p>一个强大的安装包管理工具.</p><p>macOS 缺失的软件包的管理器</p></blockquote><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/bin/ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot;</span><br></pre></td></tr></table></figure><p>将以上命令粘贴至终端。</p><p>脚本会在执行前暂停，并说明将它将做什么。高级安装选项在 这里 (required for Linux and Windows 10 Subsystem for Linux)。</p><h2 id="替换源"><a href="#替换源" class="headerlink" title="替换源"></a>替换源</h2><blockquote><p>参考<a href="https://mirror.tuna.tsinghua.edu.cn/help/homebrew/" target="_blank" rel="noopener">清华</a>的加速器</p></blockquote><h3 id="替换现有上游"><a href="#替换现有上游" class="headerlink" title="替换现有上游"></a>替换现有上游</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> <span class="string">"<span class="variable">$(brew --repo)</span>"</span></span><br><span class="line">git remote <span class="built_in">set</span>-url origin https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/brew.git</span><br><span class="line"><span class="built_in">cd</span> <span class="string">"<span class="variable">$(brew --repo)</span>/Library/Taps/homebrew/homebrew-core"</span></span><br><span class="line">git remote <span class="built_in">set</span>-url origin https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/homebrew-core.git</span><br><span class="line"></span><br><span class="line">brew update</span><br></pre></td></tr></table></figure><h3 id="使用-homebrew-science-或者-homebrew-python"><a href="#使用-homebrew-science-或者-homebrew-python" class="headerlink" title="使用 homebrew-science 或者 homebrew-python"></a>使用 homebrew-science 或者 homebrew-python</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> <span class="string">"<span class="variable">$(brew --repo)</span>/Library/Taps/homebrew/homebrew-science"</span></span><br><span class="line">git remote <span class="built_in">set</span>-url origin https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/homebrew-science.git</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> <span class="string">"<span class="variable">$(brew --repo)</span>/Library/Taps/homebrew/homebrew-python"</span></span><br><span class="line">git remote <span class="built_in">set</span>-url origin https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/homebrew-python.git</span><br><span class="line"></span><br><span class="line">brew update</span><br></pre></td></tr></table></figure><h1 id="优化命令行-改用-zsh"><a href="#优化命令行-改用-zsh" class="headerlink" title="优化命令行-改用 zsh"></a>优化命令行-改用 zsh</h1><blockquote><p>使用 mac 的一个原因就是因为强大的命令行，原生终端已经很好了，但是还是可以进一步进行优化的</p></blockquote><h2 id="安装-iterm2"><a href="#安装-iterm2" class="headerlink" title="安装 iterm2"></a>安装 iterm2</h2><blockquote><p>比终端好用的多的终端</p></blockquote><p><a href="https://www.iterm2.com/" target="_blank" rel="noopener">官网下载</a>然后进行安装即可</p><h2 id="zsh"><a href="#zsh" class="headerlink" title="zsh"></a>zsh</h2><blockquote><p>zsh 兼容 bash 但是显示的细节更丰富</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/1864602-ba00e01e48afab32.png" alt=""></p><h3 id="Zsh-具有以下主要功能："><a href="#Zsh-具有以下主要功能：" class="headerlink" title="Zsh 具有以下主要功能："></a>Zsh 具有以下主要功能：</h3><ul><li>开箱即用、可编程的命令行补全功能可以帮助用户输入各种参数以及选项。</li><li>在用户启动的所有 shell 中共享命令历史。</li><li>通过扩展的文件通配符，可以不利用外部命令达到 find 命令一般展开文件名。</li><li>改进的变量与数组处理。</li><li>在缓冲区中编辑多行命令。</li><li>多种兼容模式，例如使用/bin/sh 运行时可以伪装成 Bourne shell。<br>可以定制呈现形式的提示符；包括在屏幕右端显示信息，并在键入长命令时自动隐藏。</li><li>可加载的模块，提供其他各种支持：完整的 TCP 与 Unix 域套接字控制，</li><li>FTP 客户端与扩充过的数学函数。</li><li>完全可定制化。</li></ul><h3 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h3><p>自带的，iterm2 安装完之后文件夹都帮你建立好了</p><h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chsh -s /bin/zsh</span><br></pre></td></tr></table></figure><h3 id="美化"><a href="#美化" class="headerlink" title="美化"></a>美化</h3><h4 id="安装-oh-my-zsh"><a href="#安装-oh-my-zsh" class="headerlink" title="安装 oh my zsh"></a>安装 oh my zsh</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://github.com/robbyrussell/oh-my-zsh/raw/master/tools/install.sh -O - | sh</span><br></pre></td></tr></table></figure><h4 id="更换主题和插件"><a href="#更换主题和插件" class="headerlink" title="更换主题和插件"></a><a href="https://www.jianshu.com/p/d194d29e488c?open_source=weibo_search" target="_blank" rel="noopener">更换主题和插件</a></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">修改主题：</span><br><span class="line"></span><br><span class="line">$ vim ~/.zshrc</span><br><span class="line">将ZSH_THEME改成ys</span><br><span class="line"></span><br><span class="line">ZSH_THEME=&quot;ys&quot;</span><br><span class="line">更新配置：</span><br><span class="line"></span><br><span class="line">$ source ~/.zshrc</span><br></pre></td></tr></table></figure><h1 id="node"><a href="#node" class="headerlink" title="node"></a>node</h1><blockquote><p>改用淘宝镜像 这样还能防止一些包要从国外下载源码再编译造成的问题</p></blockquote><h2 id="安装原生的-node"><a href="#安装原生的-node" class="headerlink" title="安装原生的 node"></a>安装原生的 node</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install node</span><br></pre></td></tr></table></figure><h2 id="升级为国内的taobao-版"><a href="#升级为国内的taobao-版" class="headerlink" title="升级为国内的taobao 版"></a>升级为国内的<a href="https://npm.taobao.org/" target="_blank" rel="noopener">taobao 版</a></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure><h2 id="node-版本管理"><a href="#node-版本管理" class="headerlink" title="node 版本管理"></a>node 版本管理</h2><blockquote><p>讲道理，n 超级好用</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm i -g n</span><br></pre></td></tr></table></figure><h1 id="VSCODE"><a href="#VSCODE" class="headerlink" title="VSCODE"></a>VSCODE</h1><blockquote><p>最强编辑器-之一</p></blockquote><p>安装插件可以参考以前的文章<a href="https://www.mizuka.top/2018/11/09/vscode%E6%8F%92%E4%BB%B6%E5%88%86%E4%BA%AB/">vscode 插件分享</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Mac-前端上手指南&quot;&gt;&lt;a href=&quot;#Mac-前端上手指南&quot; class=&quot;headerlink&quot; title=&quot;Mac 前端上手指南&quot;&gt;&lt;/a&gt;Mac 前端上手指南&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;MAC 是一个强大的生产力工具，但是因为 g*w 
      
    
    </summary>
    
      <category term="可以公开的情报" scheme="https://www.mizuka.top/categories/%E5%8F%AF%E4%BB%A5%E5%85%AC%E5%BC%80%E7%9A%84%E6%83%85%E6%8A%A5/"/>
    
    
      <category term="前端" scheme="https://www.mizuka.top/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="上手指南" scheme="https://www.mizuka.top/tags/%E4%B8%8A%E6%89%8B%E6%8C%87%E5%8D%97/"/>
    
      <category term="MAC" scheme="https://www.mizuka.top/tags/MAC/"/>
    
      <category term="经验" scheme="https://www.mizuka.top/tags/%E7%BB%8F%E9%AA%8C/"/>
    
  </entry>
  
  <entry>
    <title>我们是怎么从ng迁移到vue的</title>
    <link href="https://www.mizuka.top/2019/01/03/%E6%88%91%E4%BB%AC%E6%98%AF%E6%80%8E%E4%B9%88%E4%BB%8Eng%E8%BF%81%E7%A7%BB%E5%88%B0vue%E7%9A%84/"/>
    <id>https://www.mizuka.top/2019/01/03/我们是怎么从ng迁移到vue的/</id>
    <published>2019-01-03T21:41:57.000Z</published>
    <updated>2019-07-09T03:09:08.465Z</updated>
    
    <content type="html"><![CDATA[<h1 id="我们是如何从ng1迁移ing到vue的"><a href="#我们是如何从ng1迁移ing到vue的" class="headerlink" title="我们是如何从ng1迁移ing到vue的"></a>我们是如何从ng1迁移ing到vue的</h1><blockquote><p>原本的技术栈 ng1 + gulp + slim +<br>vue *2 + iframe 的一个后端管理项目</p></blockquote><p><a href="https://juejin.im/post/5c2e109fe51d453fdd604763" target="_blank" rel="noopener"><img src="https://badge.juejin.im/entry/5c2e10c7f265da613d7c31ee/likes.svg?style=flat-square" alt=""></a></p><p><img src="https://camo.githubusercontent.com/5082953bc69645086be2b2ac5e1a8fa20eff0314/68747470733a2f2f73696e676c652d7370612e6a732e6f72672f696d672f6c6f676f2d77686974652d6267626c75652e737667" alt=""></p><p>这是一个本身因为人手不足，一开始由后端同学创建的后端管理项目，基本采用了gulp + ng1来进行开发，同时前端接手之后为了方便开发以及跟上潮流，采用了新开子目录使用vue开发，nginx和iframe进行整合的方式，最后一个项目变成了三个项目，其实最开始进行开发的时候，连怎么启动都不知道😂</p><h1 id="要解决的问题"><a href="#要解决的问题" class="headerlink" title="要解决的问题"></a>要解决的问题</h1><h2 id="项目的层级结构"><a href="#项目的层级结构" class="headerlink" title="项目的层级结构"></a>项目的层级结构</h2><h3 id="原本的结构"><a href="#原本的结构" class="headerlink" title="原本的结构"></a>原本的结构</h3><p>顶级目录只包含多个子文件夹以及build.sh，每个子项目需要独立进行编译以及开发</p><h3 id="新的结构"><a href="#新的结构" class="headerlink" title="新的结构"></a>新的结构</h3><p>采用signle-spa作为入口文件解决方案，统一管理所有项目的入口文件，实现一次启动，所有项目都能一起开发以及编译，省去了来回切换以及端口冲突</p><h2 id="构建语言的混乱"><a href="#构建语言的混乱" class="headerlink" title="构建语言的混乱"></a>构建语言的混乱</h2><h3 id="原本的架构"><a href="#原本的架构" class="headerlink" title="原本的架构"></a>原本的架构</h3><p>原本的app是使用ng1来进行编写js部分，slim来编写页面模版，同时使用gulp来完成遍历所有的js文件，并打包到一个js中，后来一些新的页面部分采用iframe引入另一个vue-cli项目，两者之间通过cookie来进行登录数据的共享。</p><h3 id="更新之后的架构"><a href="#更新之后的架构" class="headerlink" title="更新之后的架构"></a>更新之后的架构</h3><p>因为模版文件的问题，仍然以gulp为主，webpack负责vue和原本app的js打包和资源文件的编译工作，大家约定好，原本的ng部分尽量不更新，新的采用vue进行编写</p><h2 id="逐步过渡"><a href="#逐步过渡" class="headerlink" title="逐步过渡"></a>逐步过渡</h2><h3 id="原本的方案"><a href="#原本的方案" class="headerlink" title="原本的方案"></a>原本的方案</h3><p>老的不管它，需要更新就回去更新，新的需求去vue的项目中编写</p><h3 id="现在的方案"><a href="#现在的方案" class="headerlink" title="现在的方案"></a>现在的方案</h3><p>single-spa进行页面的拆分，将需要更新的老的ng部分作为一个新的子app，拆分出来之后再进行更新，保证局部更新，不影响整体</p><h1 id="解决过程"><a href="#解决过程" class="headerlink" title="解决过程"></a>解决过程</h1><h2 id="编译工具"><a href="#编译工具" class="headerlink" title="编译工具"></a>编译工具</h2><p>确定了整体的迁移方案之后，就是首先对编译工具的改造了，最开始是想把gulp先替换成webpack的（因为习惯配置webpack了，以及webpack4 + babel7真的编译速度快了很多）</p><p>但是因为slim始终找不到适合使用的webpack插件的关系，最终决定还是保留gulp进行编译ng的相关的html文件</p><h3 id="小问题"><a href="#小问题" class="headerlink" title="小问题"></a>小问题</h3><h4 id="gulp支持webpack的问题"><a href="#gulp支持webpack的问题" class="headerlink" title="gulp支持webpack的问题"></a>gulp支持webpack的问题</h4><p>gulp-webpack插件支持的webpack版本是2，但是目标是使用4(为了快),好在webpack支持使用node来进行调用，只要在编译结束之后给gulp一个回调就可以了</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>)</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span> (<span class="params">webpackConfig</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> compiler = webpack(webpackConfig);</span><br><span class="line"></span><br><span class="line">    compiler.run(<span class="function">(<span class="params">err, stats</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="built_in">console</span>.error(err)</span><br><span class="line">        reject(err)</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 输出</span></span><br><span class="line">      process.stdout.write(stats.toString(&#123;</span><br><span class="line">        <span class="comment">// stats对象中保存着编译过程中的各种消息</span></span><br><span class="line">        colors: <span class="literal">true</span>, <span class="comment">// 增加控制台颜色开关</span></span><br><span class="line">        modules: <span class="literal">false</span>, <span class="comment">// 不增加内置模块信息</span></span><br><span class="line">        children: <span class="literal">false</span>, <span class="comment">// 不增加子级信息</span></span><br><span class="line">        chunks: <span class="literal">false</span>, <span class="comment">// 允许较少的输出</span></span><br><span class="line">        chunkModules: <span class="literal">false</span> <span class="comment">// 不将内置模块的信息加到包信息</span></span><br><span class="line">      &#125;) + <span class="string">'\n\n'</span>)</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    compiler.hooks.afterEmit.tap(<span class="string">'gulp'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      resolve()</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同理，devServer也使用自定义的脚本, 当然因为公司原因，其中的api切换也直接放在devServer的before中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * webpack的devserver</span><br><span class="line"> */</span><br><span class="line">const webpack = require(&quot;webpack&quot;);</span><br><span class="line">const WebpackDevServer = require(&quot;webpack-dev-server&quot;);</span><br><span class="line">const proxy = require(&quot;http-proxy-middleware&quot;);</span><br><span class="line"></span><br><span class="line">let env = &quot;dev&quot;; // 环境</span><br><span class="line"></span><br><span class="line">module.exports = function(config) &#123;</span><br><span class="line">  return new Promise((resolve, reject) =&gt; &#123;</span><br><span class="line">    // node模式下需要进行配置</span><br><span class="line">    let devServerConfig = config.devServer;</span><br><span class="line">    let devPath = `http://$&#123;devServerConfig.host&#125;:$&#123;devServerConfig.port&#125;/`;</span><br><span class="line">    config.entry.app.unshift(&quot;webpack/hot/dev-server&quot;);</span><br><span class="line">    config.entry.app.unshift(`webpack-dev-server/client?$&#123;devPath&#125;`);</span><br><span class="line"></span><br><span class="line">    const server = new WebpackDevServer(webpack(config), &#123;</span><br><span class="line">      open: devServerConfig.open,</span><br><span class="line">      contentBase: config.output.path,</span><br><span class="line">      publicPath: config.output.publicPath,</span><br><span class="line">      hot: true,</span><br><span class="line">      disableHostCheck: devServerConfig.disableHostCheck,</span><br><span class="line">      historyApiFallback: true,</span><br><span class="line">      inline: devServerConfig.inline,</span><br><span class="line">      watchContentBase: devServerConfig.watchContentBase,</span><br><span class="line">      before: function(app) &#123;</span><br><span class="line">        </span><br><span class="line">      &#125;,</span><br><span class="line">      stats: &#123;</span><br><span class="line">        colors: true</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    server.listen(devServerConfig.port, devServerConfig.host, function(err) &#123;</span><br><span class="line">      if (err) &#123;</span><br><span class="line">        console.log(err);</span><br><span class="line">        reject(err);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      console.log(`Listening at $&#123;devPath&#125;`);</span><br><span class="line">      resolve();</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="统一构建和开发"><a href="#统一构建和开发" class="headerlink" title="统一构建和开发"></a>统一构建和开发</h2><p>因为使用的语言不一样，负责的页面不一样，Store和Route也不一样，想要统一的话，就必须解决这些问题</p><h3 id="single-spa"><a href="#single-spa" class="headerlink" title="single-spa"></a>single-spa</h3><blockquote><p>SINGLE-SPA是一个 JavaScript 元框架，它允许我们使用不同的框架构建微前端，而这些框架可以共存于单个应用中。</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/2267652-a636f8d7cce8768f.png" alt=""><br>后端微服务架构（microservice style）已经流行了一段时间了，那么前端能不能同样使用微服务呢？页面拆分成不同的部分，互相之间互不干扰又紧密相连，single-spa正是为此而出现的，而且更好的事，single-spa支持几乎所有的前端开发框架，是一个框架的元框架，而我们的迁移目标正好就是将原本的ng部分拆分成一个个小的app然后逐步迁移到vue上么</p><h3 id="统一Store"><a href="#统一Store" class="headerlink" title="统一Store"></a>统一Store</h3><p>最终决定使用vuex作为整个项目的Store，但是如何与ng本身的rootScope进行整合就又是一个问题了，好在通过import引入的js文件的作用域是共同的，只需要将ng的rootScope挂载上vuex，然后vuex使用插件的形式反过来触发更新ng就行了. </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">'../store'</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.assign(store.state, &#123;</span><br><span class="line">    _ng: &#123;</span><br><span class="line">      $rootScope: $rootScope,</span><br><span class="line">      $state: $state</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 同步这些数据到ng的Scope里</span></span><br><span class="line"><span class="comment"> * @param store</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> ngPlugin = <span class="function"><span class="params">store</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 当 store 初始化后调用</span></span><br><span class="line">  store.subscribe(<span class="function">(<span class="params">&#123; type, payload &#125;, state</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (state._ng) &#123;</span><br><span class="line">      state._ng.$rootScope[type] = payload</span><br><span class="line">      state._ng.$rootScope.$apply()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="统一路由"><a href="#统一路由" class="headerlink" title="统一路由"></a>统一路由</h3><p>目前仍然各自为政，只不过路由跳转方式通过指令的方式，将vue和ng的跳转修改为使用single-spa的路由跳转方式. 当然，因为之前ng的路由是继续hash而不是history，所以还有一部分兼容操作</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; navigateToUrl &#125; <span class="keyword">from</span> <span class="string">'single-spa'</span></span><br><span class="line"></span><br><span class="line">directives: &#123;</span><br><span class="line">      <span class="comment">// spa链接</span></span><br><span class="line">      spaLink (element, &#123;value&#125;) &#123;</span><br><span class="line">        element.style.display = <span class="string">'inline-block'</span></span><br><span class="line">        element.style.width = <span class="string">'100%'</span></span><br><span class="line">        <span class="comment">// 自动判断hash类型</span></span><br><span class="line">        <span class="keyword">let</span> hash = (value || <span class="string">''</span>).includes(<span class="string">'#'</span>) ? value.replace(<span class="string">'/#'</span>, <span class="string">'#'</span>) : <span class="string">`#/<span class="subst">$&#123;value&#125;</span>`</span></span><br><span class="line">        element.setAttribute(<span class="string">'href'</span>, value ? hash : <span class="string">'javascript:void(0)'</span>)</span><br><span class="line">        element.addEventListener(<span class="string">'click'</span>, (e) =&gt; &#123;</span><br><span class="line">          e.preventDefault()</span><br><span class="line">          <span class="keyword">if</span> (value) &#123;</span><br><span class="line">            navigateToUrl(hash)</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br></pre></td></tr></table></figure><h3 id="目录结构统一"><a href="#目录结构统一" class="headerlink" title="目录结构统一"></a>目录结构统一</h3><p>使用webpack的一个好处就是可以使用alias的方式 引入vue的相关组件，将原先平级的目录都移入src之后，只要修改alias，就能做到无缝迁移了</p><h3 id="拆分app"><a href="#拆分app" class="headerlink" title="拆分app"></a>拆分app</h3><p>没什么好说的，按照业务相关性和优先级拆分，使用single-spa进行管理</p><h1 id="目前进度"><a href="#目前进度" class="headerlink" title="目前进度"></a>目前进度</h1><p>当然啦，迁移也不是一朝一夕的事，其实主要把整个项目的侧边栏导航栏给换了，支持了一直吵着要做的搜索框，更换的过程中还出过不少问题，不过因为拆分了app，倒是没有影响整个项目的正常运行，看来迁移有望，起码现在启动项目不用各种切分支了😂，同时因为偷懒，还专门写了seed系统，通过定义数据结构快速生成项目页面，这也是后话了</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;我们是如何从ng1迁移ing到vue的&quot;&gt;&lt;a href=&quot;#我们是如何从ng1迁移ing到vue的&quot; class=&quot;headerlink&quot; title=&quot;我们是如何从ng1迁移ing到vue的&quot;&gt;&lt;/a&gt;我们是如何从ng1迁移ing到vue的&lt;/h1&gt;&lt;bloc
      
    
    </summary>
    
      <category term="可以公开的情报" scheme="https://www.mizuka.top/categories/%E5%8F%AF%E4%BB%A5%E5%85%AC%E5%BC%80%E7%9A%84%E6%83%85%E6%8A%A5/"/>
    
    
      <category term="经验" scheme="https://www.mizuka.top/tags/%E7%BB%8F%E9%AA%8C/"/>
    
      <category term="vue" scheme="https://www.mizuka.top/tags/vue/"/>
    
      <category term="ng" scheme="https://www.mizuka.top/tags/ng/"/>
    
      <category term="迁移" scheme="https://www.mizuka.top/tags/%E8%BF%81%E7%A7%BB/"/>
    
      <category term="angularJs" scheme="https://www.mizuka.top/tags/angularJs/"/>
    
  </entry>
  
  <entry>
    <title>RTAC86U刷机指南</title>
    <link href="https://www.mizuka.top/2018/12/15/RTAC86U%E5%88%B7%E6%9C%BA%E6%8C%87%E5%8D%97/"/>
    <id>https://www.mizuka.top/2018/12/15/RTAC86U刷机指南/</id>
    <published>2018-12-15T17:32:01.000Z</published>
    <updated>2019-07-09T03:09:08.461Z</updated>
    
    <content type="html"><![CDATA[<h1 id="搬家之后当然要换一个更好的路由器啦"><a href="#搬家之后当然要换一个更好的路由器啦" class="headerlink" title="搬家之后当然要换一个更好的路由器啦"></a>搬家之后当然要换一个更好的路由器啦</h1><blockquote><p>koolshare看到的推荐，新的架构 还是华硕出品趁着双十二就入手啦</p></blockquote><p><img src="https://mizuka-blog.oss-cn-shanghai.aliyuncs.com/rtac86u/IMG_4420.jpeg" alt=""></p><p>当然只是选择了一个最简单的刷机方式，原版刷官改<br>具体直接参考<a href="http://koolshare.cn/thread-139965-1-1.html" target="_blank" rel="noopener">原版帖子</a></p><h2 id="特色"><a href="#特色" class="headerlink" title="特色"></a>特色</h2><ol><li>同步华硕官方代码 </li><li>koolshare软件中心支持</li><li>ROG信仰皮肤加成</li></ol><h1 id="刷机方法"><a href="#刷机方法" class="headerlink" title="刷机方法"></a>刷机方法</h1><p>在固件升级页面下直接上传.w 后缀的固件文件</p><h2 id="固件下载"><a href="#固件下载" class="headerlink" title="固件下载"></a>固件下载</h2><p>384_32799<br>MD5: 3E477C01D18CD455362B61DCCBF33652<br>SHA1: A2C496EE545A94EADAC4CEC3C9B3A381B1B4ABB2<br><a href="http://firmware.koolshare.cn/Koolshare_ASUS_Official_Mod/RT-AC86U_3.0.0.4.384.32799/RT-AC86U_384_32799_koolshare_cferom_ubi.w" target="_blank" rel="noopener">http://firmware.koolshare.cn/Koolshare_ASUS_Official_Mod/RT-AC86U_3.0.0.4.384.32799/RT-AC86U_384_32799_koolshare_cferom_ubi.w</a></p><h2 id="刷虚拟内存"><a href="#刷虚拟内存" class="headerlink" title="刷虚拟内存"></a>刷虚拟内存</h2><blockquote><p>这个路由器最大的问题在于架构变更之后，内存占的很厉害，所以需要刷官改的另一个原因就是需要安装虚拟内存</p></blockquote><p>虚拟内存需要挂载一个格式为ext4（ext3）的u盘</p><h3 id="格式化的方法"><a href="#格式化的方法" class="headerlink" title="格式化的方法"></a>格式化的方法</h3><h4 id="osx"><a href="#osx" class="headerlink" title="osx"></a>osx</h4><p>如果没有 Homebrew 的话，需要先安装 Homebrew：</p><p>/usr/bin/ruby -e “$(curl -fsSL <a href="https://raw.githubusercontent.com/Homebrew/install/master/install)&quot;" target="_blank" rel="noopener">https://raw.githubusercontent.com/Homebrew/install/master/install)&quot;</a></p><p>安装 e2fsprogs</p><p>brew install e2fsprogs</p><p>把 U 盘插到 Mac 上，执行：</p><p>diskutil list</p><p>找到自己 U 盘的盘符，比如我这里是：/dev/disk3s1，</p><figure class="highlight plain"><figcaption><span>(external, physical):</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#:                       TYPE NAME                    SIZE       IDENTIFIER</span><br><span class="line">0:     FDisk_partition_scheme                        *30.8 GB    disk3</span><br><span class="line">1:             Windows_FAT_32 SANDISK                 30.8 GB    disk3s1</span><br></pre></td></tr></table></figure><p>然后执行格式化：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">diskutil unmountdisk /dev/disk3s1</span><br><span class="line">sudo $(brew --prefix e2fsprogs)/sbin/mkfs.ext4 /dev/disk3s1</span><br></pre></td></tr></table></figure><p>执行命令后会要求输入用户密码，然后输入 y 确认。</p><h4 id="win"><a href="#win" class="headerlink" title="win"></a>win</h4><p>下一个<a href="https://www.minitool.com/" target="_blank" rel="noopener">minitools</a></p><h3 id="加虚拟内存"><a href="#加虚拟内存" class="headerlink" title="加虚拟内存"></a>加虚拟内存</h3><p><img src="https://image.koolshare.cn/attachment/forum/201805/18/180949ce1sxrpcmqcxxyep.jpg" alt="软件中心"><br>进软件中心下载就好啦</p><h1 id="重点，不可描述，红色小飞机插件"><a href="#重点，不可描述，红色小飞机插件" class="headerlink" title="重点，不可描述，红色小飞机插件"></a>重点，不可描述，红色小飞机插件</h1><p><a href="https://github.com/hq450/fancyss" target="_blank" rel="noopener">gayhub</a> 注意架构，下载完了之后离线安装</p><p>have a nice day</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;搬家之后当然要换一个更好的路由器啦&quot;&gt;&lt;a href=&quot;#搬家之后当然要换一个更好的路由器啦&quot; class=&quot;headerlink&quot; title=&quot;搬家之后当然要换一个更好的路由器啦&quot;&gt;&lt;/a&gt;搬家之后当然要换一个更好的路由器啦&lt;/h1&gt;&lt;blockquote&gt;

      
    
    </summary>
    
      <category term="可以公开的情报" scheme="https://www.mizuka.top/categories/%E5%8F%AF%E4%BB%A5%E5%85%AC%E5%BC%80%E7%9A%84%E6%83%85%E6%8A%A5/"/>
    
    
      <category term="RTAC86U" scheme="https://www.mizuka.top/tags/RTAC86U/"/>
    
      <category term="乳酸菌" scheme="https://www.mizuka.top/tags/%E4%B9%B3%E9%85%B8%E8%8F%8C/"/>
    
      <category term="gfw" scheme="https://www.mizuka.top/tags/gfw/"/>
    
      <category term="插件" scheme="https://www.mizuka.top/tags/%E6%8F%92%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>android导致文字偏上的问题</title>
    <link href="https://www.mizuka.top/2018/12/04/android%E5%AF%BC%E8%87%B4%E6%96%87%E5%AD%97%E5%81%8F%E4%B8%8A%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <id>https://www.mizuka.top/2018/12/04/android导致文字偏上的问题/</id>
    <published>2018-12-04T18:17:35.000Z</published>
    <updated>2019-07-09T03:09:08.461Z</updated>
    
    <content type="html"><![CDATA[<h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p><img src="https://upload-images.jianshu.io/upload_images/1401034-3d1a4becc0dbd1bc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/670/format/webp" alt=""><br>移动端android有时候总是不居中，经过搜索，大概就是因为webview不支持奇数字号 例如<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">.class &#123;</span><br><span class="line">   line-height: 13px;</span><br><span class="line">   font-size: 13px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>或者(rem可能生成的字号为奇数)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">.class &#123;</span><br><span class="line">   line-height: 5rem;</span><br><span class="line">   font-size: 5rem;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><h2 id="scale"><a href="#scale" class="headerlink" title="scale"></a>scale</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">font-size: 26px; // *2</span><br><span class="line">transform: scale(.5);</span><br></pre></td></tr></table></figure><h2 id="table布局-flex-同理"><a href="#table布局-flex-同理" class="headerlink" title="table布局(flex 同理)"></a>table布局(flex 同理)</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">display: table-cell;</span><br><span class="line">text-align: center;</span><br><span class="line">vertical-align: middle;</span><br></pre></td></tr></table></figure><h2 id="line-height"><a href="#line-height" class="headerlink" title="line-height"></a>line-height</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">line-height: normal;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/1401034-3d1a4
      
    
    </summary>
    
    
      <category term="可以公开的情报" scheme="https://www.mizuka.top/tags/%E5%8F%AF%E4%BB%A5%E5%85%AC%E5%BC%80%E7%9A%84%E6%83%85%E6%8A%A5/"/>
    
      <category term="开发" scheme="https://www.mizuka.top/tags/%E5%BC%80%E5%8F%91/"/>
    
      <category term="前端" scheme="https://www.mizuka.top/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="android" scheme="https://www.mizuka.top/tags/android/"/>
    
      <category term="line-height" scheme="https://www.mizuka.top/tags/line-height/"/>
    
      <category term="font-size" scheme="https://www.mizuka.top/tags/font-size/"/>
    
  </entry>
  
  <entry>
    <title>电视直播源分享</title>
    <link href="https://www.mizuka.top/2018/11/18/%E7%94%B5%E8%A7%86%E7%9B%B4%E6%92%AD%E6%BA%90%E5%88%86%E4%BA%AB/"/>
    <id>https://www.mizuka.top/2018/11/18/电视直播源分享/</id>
    <published>2018-11-18T12:58:16.000Z</published>
    <updated>2019-07-09T03:09:08.465Z</updated>
    
    <content type="html"><![CDATA[<h1 id="你懂的"><a href="#你懂的" class="headerlink" title="你懂的"></a>你懂的</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">凤凰中文,http://223.110.243.155:80/PLTV/3/224/3221226922/index.m3u8</span><br><span class="line">凤凰中文,http://223.110.245.139/PLTV/3/224/3221226922/index.m3u8</span><br><span class="line">凤凰中文,http://112.17.0.10:8085/ysten-business/live/fhchinese/yst.m3u8</span><br><span class="line">凤凰资讯,http://223.110.243.155:80/PLTV/3/224/3221226923/index.m3u8</span><br><span class="line">凤凰HD,http://223.82.250.72/live/fhchinese/1.m3u8</span><br><span class="line">凤凰香港,http://223.110.243.155:80/PLTV/3/224/3221226975/index.m3u8</span><br><span class="line">澳门赛马台,rtmp://mjcao-001.wecast.hk:1935/live/chinese</span><br><span class="line">澳丫卫视,http://stream.mastvnet.com/MASTV/sd/live.m3u8</span><br><span class="line">澳门卫视,http://stream.mastvnet.com/MSTV/SD/live.m3u8</span><br><span class="line">澳门澳视澳门,rtmp://live4.tdm.com.mo:80/ch1/_definst_/ch1.live</span><br><span class="line">澳门澳视葡文,rtmp://live4.tdm.com.mo:80/ch2/_definst_/ch2.live</span><br><span class="line">澳门澳视卫视,rtmp://live4.tdm.com.mo:80/ch3/_definst_/ch3.live</span><br><span class="line">澳门澳视体育,rtmp://live4.tdm.com.mo:80/ch4/_definst_/sport_ch4.live</span><br><span class="line">澳门澳视资讯,rtmp://live4.tdm.com.mo:80/ch5/_definst_/info_ch5.live</span><br><span class="line">澳门澳视高清,rtmp://live4.tdm.com.mo:80/ch6/_definst_/hd_ch6.live</span><br><span class="line">澳门莲花卫视,rtmp://live-rtmp.lotustv.duolaibo.cn/lotustv/5562e9e4d409d24c9600075c</span><br><span class="line">TVBS新闻台1,rtmp://dv2.tp33.net/sat/tv551</span><br><span class="line">TVBS新闻台2,rtmp://dv2.tp33.net/sat/tv552</span><br><span class="line">TVBS新闻台3,rtmp://dv2.tp33.net:1935/sat/tv551</span><br><span class="line">TVBS新闻台4,rtmp://dv2.tp33.net:1935/sat/tv552</span><br><span class="line">纬来育乐1,rtmp://dv2.tp33.net/sat/tv701</span><br><span class="line">纬来育乐2,rtmp://dv2.tp33.net/sat/tv702</span><br><span class="line">纬来育乐3,rtmp://dv2.tp33.net:1935/sat/tv701</span><br><span class="line">纬来育乐4,rtmp://dv2.tp33.net:1935/sat/tv702</span><br><span class="line">中視1,rtmp://dv2.tp33.net/sat/tv091</span><br><span class="line">中視2,rtmp://dv2.tp33.net/sat/tv092</span><br><span class="line">中视CTV3,rtmp://dv2.tp33.net:1935/sat/tv091</span><br><span class="line">中视CTV4,rtmp://dv2.tp33.net:1935/sat/tv092</span><br><span class="line">华视1,rtmp://dv2.tp33.net/sat/tv111</span><br><span class="line">华视2,rtmp://dv2.tp33.net/sat/tv112</span><br><span class="line">华视台3,rtmp://dv2.tp33.net:1935/sat/tv111</span><br><span class="line">华视台4,rtmp://dv2.tp33.net:1935/sat/tv112</span><br><span class="line">台视1,rtmp://dv2.tp33.net/sat/tv071</span><br><span class="line">台视2,rtmp://dv2.tp33.net/sat/tv072</span><br><span class="line">台视台3,rtmp://dv2.tp33.net:1935/sat/tv072</span><br><span class="line">台视台4,rtmp://dv2.tp33.net:1935/sat/tv071</span><br><span class="line">民视1,rtmp://dv2.tp33.net/sat/tv052</span><br><span class="line">民视2,rtmp://dv2.tp33.net/sat/tv051</span><br><span class="line">民视台3,rtmp://dv2.tp33.net:1935/sat/tv051</span><br><span class="line">民视台4,rtmp://dv2.tp33.net:1935/sat/tv052</span><br><span class="line">纬来日本1,rtmp://dv2.tp33.net/sat//tv761</span><br><span class="line">纬来日本2,rtmp://dv2.tp33.net/sat/tv762</span><br><span class="line">纬来日本3,rtmp://dv2.tp33.net:1935/sat/tv761</span><br><span class="line">纬来日本4,rtmp://dv2.tp33.net:1935/sat/tv762</span><br><span class="line">三立台湾,rtmp://dv2.ts33.net/sat/tv292</span><br><span class="line">纬来体育1,rtmp://dv2.ts33.net/sat/tv722</span><br><span class="line">纬来体育2,rtmp://dv2.tp33.net/sat/tv721</span><br><span class="line">纬来体育3,rtmp://dv2.tp33.net:1935/sat/tv721</span><br><span class="line">纬来体育4,rtmp://dv2.tp33.net:1935/sat/tv722</span><br><span class="line">东森财经新闻台1,rtmp://dv2.tp33.net/sat/tv571</span><br><span class="line">东森财经新闻台2,rtmp://dv2.tp33.net/sat/tv572</span><br><span class="line">东森财经新闻台3,rtmp://dv2.tp33.net:1935/sat/tv571</span><br><span class="line">东森财经新闻台4,rtmp://dv2.tp33.net:1935/sat/tv572</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;你懂的&quot;&gt;&lt;a href=&quot;#你懂的&quot; class=&quot;headerlink&quot; title=&quot;你懂的&quot;&gt;&lt;/a&gt;你懂的&lt;/h1&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;s
      
    
    </summary>
    
      <category term="可以公开的情报" scheme="https://www.mizuka.top/categories/%E5%8F%AF%E4%BB%A5%E5%85%AC%E5%BC%80%E7%9A%84%E6%83%85%E6%8A%A5/"/>
    
    
  </entry>
  
  <entry>
    <title>小微企业验证码破解</title>
    <link href="https://www.mizuka.top/2018/11/13/%E5%B0%8F%E5%BE%AE%E4%BC%81%E4%B8%9A%E9%AA%8C%E8%AF%81%E7%A0%81%E7%A0%B4%E8%A7%A3/"/>
    <id>https://www.mizuka.top/2018/11/13/小微企业验证码破解/</id>
    <published>2018-11-13T12:07:25.000Z</published>
    <updated>2019-07-09T03:09:08.465Z</updated>
    
    <content type="html"><![CDATA[<h1 id="小微企业查询系统git地址"><a href="#小微企业查询系统git地址" class="headerlink" title="小微企业查询系统git地址"></a>小微企业查询系统<a href="https://github.com/trionfo1993/xwqy-geetest" target="_blank" rel="noopener">git地址</a></h1><blockquote><p>破解geetest offline的尝试</p></blockquote><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>最近因为有需要对爬取的非上市公司进行一个验证，而绝大多数的非上市公司又都是小微企业，比起爬企业征信系统来说，还是小微企业名录更方便一点</p><h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><p>基于node.js axios全程破解 无需下载图片 无需模拟轨迹，offline模式就是任性</p><h3 id="觉得不错帮忙Star一下啦～"><a href="#觉得不错帮忙Star一下啦～" class="headerlink" title="觉得不错帮忙Star一下啦～"></a>觉得不错帮忙Star一下啦～</h3><h4 id="破解流程"><a href="#破解流程" class="headerlink" title="破解流程"></a>破解流程</h4><p>首先我们跟着正常获取数据的流程走一遍</p><ol><li>打开<a href="http://xwqy.gsxt.gov.cn/" target="_blank" rel="noopener">小微企业名录</a>并且打开控制台</li></ol><p>可以看到大概有这几个请求<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">http://xwqy.gsxt.gov.cn/security/verify_ip</span><br><span class="line">http://xwqy.gsxt.gov.cn/security/verify_keyword</span><br><span class="line">http://xwqy.gsxt.gov.cn/pc-geetest/register?t=1516872325770</span><br></pre></td></tr></table></figure></p><p>查看一下response(当然你熟悉geetest也行)就会发现register就是geetest的初始化请求啦  </p><p><strong>返回值如下</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">challenge:&quot;a1d0c6e83f027327d8461063f4ac58a61c&quot;</span><br><span class="line">gt:&quot;6146190e4171da316dbb5bcc076e2607&quot;</span><br><span class="line">success:0</span><br></pre></td></tr></table></figure></p><p>其中你可以发现success基本都是0 也就是说离线模式</p><h4 id="什么是离线模式？"><a href="#什么是离线模式？" class="headerlink" title="什么是离线模式？"></a>什么是离线模式？</h4><p>基本就是geetest不参与判断的一个状态，验证部分都在前台和中间服务器完成</p><p>回去看之前系统下载的js 会发现两个geetest提供的js  </p><ul><li>geetest.0.0.0.js</li><li>offline.6.0.0.js</li></ul><p>这几个源文件也提供在项目中了</p><ol start="2"><li>滑块拼合</li></ol><p>发送了一个新的验证请求<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">http://xwqy.gsxt.gov.cn/pc-geetest/validate</span><br><span class="line"></span><br><span class="line">request如下：  </span><br><span class="line"></span><br><span class="line">geetest_challenge:a1d0c6e83f027327d8461063f4ac58a61c</span><br><span class="line">geetest_validate:010886ec_0084e_10100077776e</span><br><span class="line">geetest_seccode:010886ec_0084e_10100077776e|jordan</span><br></pre></td></tr></table></figure></p><h5 id="challenge在第一步我们已经获取了，问题是validate怎么获取-同时seccode就是validate加了一个-jordan而已"><a href="#challenge在第一步我们已经获取了，问题是validate怎么获取-同时seccode就是validate加了一个-jordan而已" class="headerlink" title="challenge在第一步我们已经获取了，问题是validate怎么获取? 同时seccode就是validate加了一个|jordan而已"></a>challenge在第一步我们已经获取了，问题是validate怎么获取? 同时seccode就是validate加了一个|jordan而已</h5><p>既然是offline 那就分析offline.js呗</p><p>查看代码就能看到这句<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">return c &gt;= f - 3 &amp;&amp; c &lt;= f + 3 ? &#123;</span><br><span class="line">            success: !0,</span><br><span class="line">            message: &quot;success&quot;,</span><br><span class="line">            validate: b.A(c, e.d.challenge) + &quot;_&quot; + b.A(a.b(&quot;rand0&quot;, e.c), e.d.challenge) + &quot;_&quot; + b.A(a.b(&quot;rand1&quot;, e.c), e.d.challenge),</span><br><span class="line">            score: Math.round(d / 200)</span><br><span class="line">        &#125; : &#123;success: 0, message: &quot;fail&quot;&#125;</span><br></pre></td></tr></table></figure></p><p>这不就是我们要的么！<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">validate: b.A(c, e.d.challenge) + &quot;_&quot; + b.A(a.b(&quot;rand0&quot;, e.c), e.d.challenge) + &quot;_&quot; + b.A(a.b(&quot;rand1&quot;, e.c), e.d.challenge),</span><br></pre></td></tr></table></figure></p><p>offline.6.0.0.js和offline.5.0.0.js可以看出一样是通过密钥 rand rand1进行加密获取一个值，一半来说这种方案就是得依靠收集案例倒推，但是我们是不会重复造轮子的</p><p>github关键词一搜就能发现已经有人整理好了<a href="&#39;https://github.com/9468305/python-script/blob/master/geetest_offline/util.py&#39;">‘https://github.com/9468305/python-script/blob/master/geetest_offline/util.py’</a></p><p>所以那就用呗</p><p>后续就只是涉及到爬虫以及页面跳转的问题了，具体可以看util内的代码</p><p>而且在micro_lib内也可以直接搜索 发送验证的地址改为<a href="http://xwqy.gsxt.gov.cn/mirco/micro_lib" target="_blank" rel="noopener">http://xwqy.gsxt.gov.cn/mirco/micro_lib</a></p><p>并相应修改传入的值即可<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">organId:100000</span><br><span class="line">textfield:encode后的关键词</span><br><span class="line">fwId:1400</span><br><span class="line">searchOrganId:</span><br><span class="line">channelId:99</span><br><span class="line">captcha:</span><br><span class="line">geetest_challenge:3ef815416f775098fe977004015c619332</span><br><span class="line">geetest_validate:010886ec_0084e_10100077776e</span><br><span class="line">geetest_seccode:010886ec_0084e_10100077776e|jordan</span><br></pre></td></tr></table></figure></p><h3 id="restful-api"><a href="#restful-api" class="headerlink" title="restful-api"></a>restful-api</h3><h4 id="已经做了一个api形式的-直接在url内打入关键词即可爬取"><a href="#已经做了一个api形式的-直接在url内打入关键词即可爬取" class="headerlink" title="已经做了一个api形式的 直接在url内打入关键词即可爬取"></a>已经做了一个api形式的 直接在url内打入关键词即可爬取</h4><h4 id="运行步骤"><a href="#运行步骤" class="headerlink" title="运行步骤"></a>运行步骤</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install</span><br><span class="line">npm run start</span><br><span class="line">curl http://127.0.0.1:4001/公司关键词</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;小微企业查询系统git地址&quot;&gt;&lt;a href=&quot;#小微企业查询系统git地址&quot; class=&quot;headerlink&quot; title=&quot;小微企业查询系统git地址&quot;&gt;&lt;/a&gt;小微企业查询系统&lt;a href=&quot;https://github.com/trionfo1993
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>vscode插件分享</title>
    <link href="https://www.mizuka.top/2018/11/09/vscode%E6%8F%92%E4%BB%B6%E5%88%86%E4%BA%AB/"/>
    <id>https://www.mizuka.top/2018/11/09/vscode插件分享/</id>
    <published>2018-11-09T10:26:22.000Z</published>
    <updated>2019-07-09T03:09:08.461Z</updated>
    
    <content type="html"><![CDATA[<h1 id="VSCODE的插件系列"><a href="#VSCODE的插件系列" class="headerlink" title="VSCODE的插件系列"></a>VSCODE的插件系列</h1><blockquote><p>使用vscode进行开发怎么能少的了插件呢  </p></blockquote><p><a href="https://juejin.im/post/5be53004f265da615b70f7a0" target="_blank" rel="noopener"><img src="https://badge.juejin.im/entry/5be530546fb9a049f153b37f/likes.svg?style=flat-square" alt=""></a></p><p>丰富的插件让vscode更加好用 顺便推荐图床<a href="https://sm.ms/" target="_blank" rel="noopener">（图床地址）</a></p><h1 id="美化插件"><a href="#美化插件" class="headerlink" title="美化插件"></a>美化插件</h1><ul><li><p>background 给编辑器窗口加个背景！唯一的缺点是vscode会显示已损坏，当然啦，并不影响使用<br><img src="https://i.loli.net/2018/11/09/5be524d44f7b0.png" alt=""><br>可以参考以下配置</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"background.useDefault"</span>: <span class="literal">false</span>,</span><br><span class="line"><span class="string">"background.style"</span>: &#123;</span><br><span class="line">  <span class="string">"content"</span>: <span class="string">"''"</span>,</span><br><span class="line">  <span class="string">"pointer-events"</span>: <span class="string">"none"</span>,</span><br><span class="line">  <span class="string">"position"</span>: <span class="string">"absolute"</span>,</span><br><span class="line">  <span class="string">"z-index"</span>: <span class="string">"99999"</span>,</span><br><span class="line">  <span class="string">"width"</span>: <span class="string">"100%"</span>,</span><br><span class="line">  <span class="string">"height"</span>: <span class="string">"100%"</span>,</span><br><span class="line">  <span class="string">"background-position"</span>: <span class="string">"100% 90%"</span>,</span><br><span class="line">  <span class="string">"background-size"</span>: <span class="string">"auto 60%"</span>,</span><br><span class="line">  <span class="string">"background-repeat"</span>: <span class="string">"no-repeat"</span>,</span><br><span class="line">  <span class="string">"opacity"</span>: <span class="number">0.1</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="string">"background.customImages"</span>: [</span><br><span class="line">  <span class="string">"背景图片地址1"</span>,</span><br><span class="line">  <span class="string">"背景图片地址2"</span>,</span><br><span class="line">  <span class="string">"背景图片地址3"</span></span><br><span class="line">],</span><br></pre></td></tr></table></figure></li><li><p>carbon-now-sh 一个非常好看的代码截图工具 整合之后 选中然后快捷键就能截图啦 <img src="https://i.loli.net/2018/11/09/5be5271f9c4e3.png" alt=""></p></li></ul><h1 id="开发辅助"><a href="#开发辅助" class="headerlink" title="开发辅助"></a>开发辅助</h1><h2 id="Debugger"><a href="#Debugger" class="headerlink" title="Debugger"></a>Debugger</h2><ul><li>Debugger for Chrome 看名字就知道了</li><li>open in browser 懒得开浏览器用的</li><li>Quokka.js 实时计算，查看结果<br><img src="https://quokkajs.com/assets/img/vsc1.gif" alt=""></li></ul><h2 id="路径补全以及包大小"><a href="#路径补全以及包大小" class="headerlink" title="路径补全以及包大小"></a>路径补全以及包大小</h2><ul><li>File Peek</li><li>Import Cost 计算引入需要占用多大的地方</li><li>Path Intellisense</li></ul><h2 id="npm"><a href="#npm" class="headerlink" title="npm"></a>npm</h2><ul><li>npm</li><li>NPM-Scripts 方便运行脚本</li></ul><h2 id="格式化"><a href="#格式化" class="headerlink" title="格式化"></a>格式化</h2><ul><li>ESLint</li><li>Prettier 格式化</li><li>Vetur vue格式化以及相关配置</li><li>Vue 2 Snippets</li></ul><p>eslint 和 prettier配合使用，vue自动保存格式化的配置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&quot;vetur.format.defaultFormatter.html&quot;: &quot;none&quot;, // 默认html的方法</span><br><span class="line">&quot;eslint.autoFixOnSave&quot;: true, // 自动保存</span><br><span class="line">&quot;eslint.validate&quot;: [</span><br><span class="line">  &#123;</span><br><span class="line">    &quot;language&quot;: &quot;vue&quot;,</span><br><span class="line">    &quot;autoFix&quot;: true</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    &quot;language&quot;: &quot;html&quot;,</span><br><span class="line">    &quot;autoFix&quot;: true</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    &quot;language&quot;: &quot;javascript&quot;,</span><br><span class="line">    &quot;autoFix&quot;: true</span><br><span class="line">  &#125;</span><br><span class="line">],</span><br><span class="line">&quot;prettier.singleQuote&quot;: true, // &apos; or &quot;&quot;</span><br><span class="line">&quot;prettier.semi&quot;: false, // 分号</span><br><span class="line">&quot;prettier.eslintIntegration&quot;: true, // 走eslint</span><br></pre></td></tr></table></figure></p><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><ul><li>GitLens 比自带的git好用多了的git 还能显示xx行是谁什么时候提交的</li><li>Settings Sync 同步设置到git上<br><strong>强烈推荐</strong> 具体安装步骤可以参考<a href="https://blog.csdn.net/u012207345/article/details/78246623" target="_blank" rel="noopener">其他人的博客</a><br>这里就写一下mac下的快捷键  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">downloadSettings    ⇧⌥D</span><br><span class="line">extension.updateSettings    ⇧⌥U</span><br></pre></td></tr></table></figure></li></ul><p>最后送上我当前配置的gist，有需要的可以安装上setting sync后将创建的gist改成这个来自动获取插件哦<br><a href="https://gist.github.com/mizuka-wu/5c74462ce1620fd62af7beb88501d163" target="_blank" rel="noopener">gist 地址</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;VSCODE的插件系列&quot;&gt;&lt;a href=&quot;#VSCODE的插件系列&quot; class=&quot;headerlink&quot; title=&quot;VSCODE的插件系列&quot;&gt;&lt;/a&gt;VSCODE的插件系列&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;使用vscode进行开发怎么能少的了插件呢
      
    
    </summary>
    
      <category term="开发的捷径" scheme="https://www.mizuka.top/categories/%E5%BC%80%E5%8F%91%E7%9A%84%E6%8D%B7%E5%BE%84/"/>
    
    
      <category term="笔记" scheme="https://www.mizuka.top/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="学习" scheme="https://www.mizuka.top/tags/%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="记录" scheme="https://www.mizuka.top/tags/%E8%AE%B0%E5%BD%95/"/>
    
      <category term="vscode" scheme="https://www.mizuka.top/tags/vscode/"/>
    
  </entry>
  
  <entry>
    <title>学js很简单，就是有点头冷（1从工程化开始）</title>
    <link href="https://www.mizuka.top/2018/11/07/%E5%AD%A6js%E5%BE%88%E7%AE%80%E5%8D%95%EF%BC%8C%E5%B0%B1%E6%98%AF%E6%9C%89%E7%82%B9%E5%A4%B4%E5%86%B71/"/>
    <id>https://www.mizuka.top/2018/11/07/学js很简单，就是有点头冷1/</id>
    <published>2018-11-07T10:58:25.000Z</published>
    <updated>2019-07-09T03:09:08.465Z</updated>
    
    <content type="html"><![CDATA[<h1 id="工程化"><a href="#工程化" class="headerlink" title="工程化"></a>工程化</h1><blockquote><p>反正也是公司要要求自己从头写一个类库，干脆。。。你懂的，全部记录一下吧</p></blockquote><h2 id="为什么要工程化？"><a href="#为什么要工程化？" class="headerlink" title="为什么要工程化？"></a>为什么要工程化？</h2><p>工程化是为了规范开发行为，是为了多人开发以及未来改进，当然，也是为了甩锅hhhh，这是一个目前比较简单的工程的目录<img src="https://mizuka-blog.oss-cn-shanghai.aliyuncs.com/learn-js/85CDA5F2-2279-438B-B4A9-7C3F7CC74088.png" alt="目录"><br>可以看到大概现在分了几个部分</p><ul><li><strong>.babelrc</strong> 配置转码的东西，主要为了兼容浏览器</li><li><strong>.eslintrc.js</strong> 代码格式化规范配置，</li><li><strong>.gitignore</strong> 哪些文件不必加入git</li><li><strong>gulpfile.js</strong> gulp构建工具</li><li><strong>rollup.config.js</strong> 构建工具+1</li><li><strong>src</strong> 源码！</li><li><strong>package.json</strong> 这个东西，现在工程化里不存在都不可能的，定义了需要引用的第三方包以及本身的一系列配置文件</li></ul><h2 id="知道为什么js如此重要么？"><a href="#知道为什么js如此重要么？" class="headerlink" title="知道为什么js如此重要么？"></a>知道为什么js如此重要么？</h2><p>HTML是骨架，css像是化妆品，js。。。能生成和修改html和css</p><h1 id="开始吧"><a href="#开始吧" class="headerlink" title="开始吧"></a>开始吧</h1><h2 id="版本管理工具"><a href="#版本管理工具" class="headerlink" title="版本管理工具"></a>版本管理工具</h2><p><img src="https://www.linuxjournal.com/sites/default/files/styles/360_250/public/nodeimage/story/git-icon.png" alt="gitlogo"></p><p>我们版本管理工具选择git，主要是为了托管在github上，git的一个好处就是分支开发，这样多个人在同一个可以进行同步开发，以及，<strong>查找哪些有问题的代码是谁写的</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;工程化&quot;&gt;&lt;a href=&quot;#工程化&quot; class=&quot;headerlink&quot; title=&quot;工程化&quot;&gt;&lt;/a&gt;工程化&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;反正也是公司要要求自己从头写一个类库，干脆。。。你懂的，全部记录一下吧&lt;/p&gt;
&lt;/blockquote
      
    
    </summary>
    
      <category term="学习笔记" scheme="https://www.mizuka.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="前端" scheme="https://www.mizuka.top/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="笔记" scheme="https://www.mizuka.top/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="教程" scheme="https://www.mizuka.top/tags/%E6%95%99%E7%A8%8B/"/>
    
      <category term="javascript" scheme="https://www.mizuka.top/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>学js很简单，就是有点头冷（0，大概是绪论）</title>
    <link href="https://www.mizuka.top/2018/11/01/%E5%AD%A6js%E5%BE%88%E7%AE%80%E5%8D%95%EF%BC%8C%E5%B0%B1%E6%98%AF%E6%9C%89%E7%82%B9%E5%A4%B4%E5%86%B70/"/>
    <id>https://www.mizuka.top/2018/11/01/学js很简单，就是有点头冷0/</id>
    <published>2018-11-01T17:25:25.000Z</published>
    <updated>2019-07-09T03:09:08.465Z</updated>
    
    <content type="html"><![CDATA[<h1 id="学js很简单，就是有点头冷"><a href="#学js很简单，就是有点头冷" class="headerlink" title="学js很简单，就是有点头冷"></a>学js很简单，就是有点头冷</h1><blockquote><p>对老angularjs项目进行改造以及迁移到vue，其中遇到了很多困难点以及很多js原理性的东西，在这里进行收集以及汇总</p></blockquote><h2 id="一些工具网站的推荐"><a href="#一些工具网站的推荐" class="headerlink" title="一些工具网站的推荐"></a>一些工具网站的推荐</h2><blockquote><p>在我刚入行的2016年，前端js的工程化也才刚刚兴起，虽然还是有很多网站还在完全使用jquery，css和js的引入方法仍然靠手工往html文件里插，现在完全都不一样了，node.js的出现，催生了express,gulp，webpack等等，整个前端开始完全工程化，源代码，生成，开发测试服务器，代码格式化，自动生成注释，甚至连编辑器都，当然啦，这样也催生了很多问题，比如webpack的另一面也是以配置繁琐而出名，以下顺便介绍几个小网站，可以自动生成新建一个项目的常用配置</p></blockquote><ul><li><strong>gitignore</strong> 告知git系统中哪些文件不需要进入git，推荐<a href="https://www.gitignore.io/" target="_blank" rel="noopener">gitignore.io</a>,只要输入目标语言以及编辑器即可 <a href="https://www.gitignore.io/api/node,vuejs,webstorm,visualstudiocode" target="_blank" rel="noopener">一个vue的例子</a></li><li><strong>license</strong> 授权文件，有时候这个是维权的好东西<a href="https://choosealicense.com/" target="_blank" rel="noopener">https://choosealicense.com/</a></li><li><strong>兼容性检查</strong> 查看你要用的特性是否支持，万恶的ie基本都是红的<a href="https://caniuse.com/#search=fetch" target="_blank" rel="noopener">caniuse</a>,虽然很多可以通过各种polyfill进行解决，不过总是有几个漏网之鱼不是么</li><li><strong>polyfill</strong> babel的转码只会转语法，一些基于浏览器的特性是不会进行转码的，比如Promise需要引入专用的promise-polyfill，推荐一个能够自动注入的网站<a href="https://polyfill.io/v2/docs/" target="_blank" rel="noopener">polyfill.io</a></li><li><strong>渐变生成</strong> 生成css渐变色很麻烦？ <a href="http://www.colorzilla.com/gradient-editor/" target="_blank" rel="noopener">试试这个</a></li><li><strong>其他辅助</strong> 从正则到css到box-shadow，这个网站应有尽有<a href="http://tools.jb51.net/aideddesign/css3_boxshadow" target="_blank" rel="noopener">http://tools.jb51.net/aideddesign/css3_boxshadow</a></li></ul><h1 id="基本知识"><a href="#基本知识" class="headerlink" title="基本知识"></a>基本知识</h1><h2 id="js版本"><a href="#js版本" class="headerlink" title="js版本"></a>js版本</h2><p>js有几个主要阶段，ES3，ES5，ES6，ES7，ES8，其中最为重要的大概就是es5，es6了，es5是目前浏览器支持最为广泛的一个版本（因为IE），es6相当于现代浏览器的一个标志，ES6中大量新特性的加入，使得本身很多困恼前端的问题，比如作用域提升啊，回调地狱啊等，都有了很大程度的提升以及弥补，当然因为不是所有浏览器都实现了这些es6的规范，为了兼容考虑，我们都会使用babel将其转回ES5，记住，因为babel只会转译语法糖和一部分实现，像新的类（Promise）还是需要使用polyfill来进行实现的。</p><h2 id="跨域"><a href="#跨域" class="headerlink" title="跨域"></a>跨域</h2><p>跨域的详细介绍可以参考<a href="http://www.ruanyifeng.com/blog/2016/04/cors.html" target="_blank" rel="noopener">ruanyifeng的博客</a><br>简单来说，端口，域名，子域名，只要有一点不一样，浏览器就会自动帮我们把请求返回的数据给拦截，所以开发过程中收不到后端小伙伴给的数据也请不要着急，开发中我们可以使用webpack的dev-server的<a href="https://blog.csdn.net/imkxrc/article/details/80648371" target="_blank" rel="noopener">proxy功能</a>，正式版用nginx代理api和前端到同一个域名，当然直接上<a href="https://www.jianshu.com/p/f9c21da2c661" target="_blank" rel="noopener">cors</a>进行跨域也是可以的，不过这个主要还是后端的工作啦，而且记住，options请求也让后端处理一下</p><h2 id="工程化"><a href="#工程化" class="headerlink" title="工程化"></a>工程化</h2><p>最早的时候，整个前端项目的开发是非常无序的，新建一个html，然后通过链接往里面不停的塞js，塞css，那个时候整个项目基本都是静态网页，而动态的部分一般交由php或者java的jsp进行动态生成html代码，然后通过服务器生成后扔回给用户的浏览器，但是随着nodejs的出现以及html5的出现，前端开始逐渐承担起和用户交互的工作，而不是原先仅仅制作出一些简单的动效以及布局，前端也由一个人进行开发而变成了多人协作，甚至在今天，前端不仅仅可以运行在浏览器上，作为服务器以及app也不再是什么难事</p><h2 id="事件循环"><a href="#事件循环" class="headerlink" title="事件循环"></a>事件循环</h2><p>简单来说，js为了防止多个线程修改同一个dom这一类的操作，是只有一个线程的（webworker，serviceworker是后来出的，而且不能和dom通信），js就设计了一个回调机制，事件循环，最简单来说，有两个循环，main循环，micro循环，当js有空闲的时候，优先从micro循环中取下一个要调用的函数，然后才是main循环中，而main循环只有三种方式插入</p><ol><li>新的js文件引入</li><li>setTimeout</li><li>setInterval</li></ol><p>记住，有时候js一些奇怪的行为就是因为时间循环，以及。。。这是面试考点，问你数据输出顺序的</p><h1 id="其他链接"><a href="#其他链接" class="headerlink" title="其他链接"></a>其他链接</h1><p><a href="https://www.mizuka.top/2018/11/07/%E5%AD%A6js%E5%BE%88%E7%AE%80%E5%8D%95%EF%BC%8C%E5%B0%B1%E6%98%AF%E6%9C%89%E7%82%B9%E5%A4%B4%E5%86%B71/">从工程化说起</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;学js很简单，就是有点头冷&quot;&gt;&lt;a href=&quot;#学js很简单，就是有点头冷&quot; class=&quot;headerlink&quot; title=&quot;学js很简单，就是有点头冷&quot;&gt;&lt;/a&gt;学js很简单，就是有点头冷&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;对老angularjs项目
      
    
    </summary>
    
      <category term="学习笔记" scheme="https://www.mizuka.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="前端" scheme="https://www.mizuka.top/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="笔记" scheme="https://www.mizuka.top/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="教程" scheme="https://www.mizuka.top/tags/%E6%95%99%E7%A8%8B/"/>
    
      <category term="javascript" scheme="https://www.mizuka.top/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>情侣日常1</title>
    <link href="https://www.mizuka.top/2018/10/23/%E6%83%85%E4%BE%A3%E6%97%A5%E5%B8%B81/"/>
    <id>https://www.mizuka.top/2018/10/23/情侣日常1/</id>
    <published>2018-10-23T09:40:02.000Z</published>
    <updated>2019-07-09T03:09:08.465Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://wx2.sinaimg.cn/mw690/95fbe0bfgy1fwh9zr01xtj20u00c6qfw.jpg" alt="图片"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;https://wx2.sinaimg.cn/mw690/95fbe0bfgy1fwh9zr01xtj20u00c6qfw.jpg&quot; alt=&quot;图片&quot;&gt;&lt;/p&gt;

      
    
    </summary>
    
      <category term="祉华" scheme="https://www.mizuka.top/categories/%E7%A5%89%E5%8D%8E/"/>
    
    
      <category term="日常" scheme="https://www.mizuka.top/tags/%E6%97%A5%E5%B8%B8/"/>
    
      <category term="祉华" scheme="https://www.mizuka.top/tags/%E7%A5%89%E5%8D%8E/"/>
    
  </entry>
  
  <entry>
    <title>从js数组重查找出重复元素的方法</title>
    <link href="https://www.mizuka.top/2018/10/18/%E4%BB%8Ejs%E6%95%B0%E7%BB%84%E9%87%8D%E6%9F%A5%E6%89%BE%E5%87%BA%E9%87%8D%E5%A4%8D%E5%85%83%E7%B4%A0%E7%9A%84%E6%96%B9%E6%B3%95/"/>
    <id>https://www.mizuka.top/2018/10/18/从js数组重查找出重复元素的方法/</id>
    <published>2018-10-18T11:12:53.000Z</published>
    <updated>2019-07-09T03:09:08.461Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一段从数组中获取重复数据的代码"><a href="#一段从数组中获取重复数据的代码" class="headerlink" title="一段从数组中获取重复数据的代码"></a>一段从数组中获取重复数据的代码</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Array.prototype.duplicate=function() &#123;</span><br><span class="line">  let tmp = [];</span><br><span class="line">  this.concat().sort().sort(function(a,b)&#123;</span><br><span class="line">    if(a==b &amp;&amp; tmp.indexOf(a) === -1) tmp.push(a);</span><br><span class="line">  &#125;);</span><br><span class="line">  return tmp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;一段从数组中获取重复数据的代码&quot;&gt;&lt;a href=&quot;#一段从数组中获取重复数据的代码&quot; class=&quot;headerlink&quot; title=&quot;一段从数组中获取重复数据的代码&quot;&gt;&lt;/a&gt;一段从数组中获取重复数据的代码&lt;/h1&gt;&lt;figure class=&quot;highli
      
    
    </summary>
    
      <category term="开发的捷径" scheme="https://www.mizuka.top/categories/%E5%BC%80%E5%8F%91%E7%9A%84%E6%8D%B7%E5%BE%84/"/>
    
    
      <category term="js" scheme="https://www.mizuka.top/tags/js/"/>
    
      <category term="ecmascript" scheme="https://www.mizuka.top/tags/ecmascript/"/>
    
      <category term="数组" scheme="https://www.mizuka.top/tags/%E6%95%B0%E7%BB%84/"/>
    
      <category term="技巧" scheme="https://www.mizuka.top/tags/%E6%8A%80%E5%B7%A7/"/>
    
  </entry>
  
  <entry>
    <title>教你如何构建Mojave动态壁纸</title>
    <link href="https://www.mizuka.top/2018/10/16/%E6%95%99%E4%BD%A0%E5%A6%82%E4%BD%95%E6%9E%84%E5%BB%BAMojave%E5%8A%A8%E6%80%81%E5%A3%81%E7%BA%B8/"/>
    <id>https://www.mizuka.top/2018/10/16/教你如何构建Mojave动态壁纸/</id>
    <published>2018-10-16T13:46:10.000Z</published>
    <updated>2019-07-09T03:09:08.465Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Mojave动态壁纸"><a href="#Mojave动态壁纸" class="headerlink" title="Mojave动态壁纸"></a>Mojave动态壁纸</h1><blockquote><p>OSX Mojave发布带来了黑暗模式，众多改进，其中一个功能就在能够根据你当地所处的时间，动态切换系统背景</p></blockquote><h2 id="动态壁纸"><a href="#动态壁纸" class="headerlink" title="动态壁纸"></a>动态壁纸</h2><p>大家都知道，apple得益于自身的封闭特性，拥有众多自身所特有的特殊格式，这次的动态背景其实就是依托于背后的<strong>Heic</strong>格式</p><h3 id="Heic格式"><a href="#Heic格式" class="headerlink" title="Heic格式"></a>Heic格式</h3><p>如果你使用过apple的live photo 就会发现其导出的格式就是heic, 这其实就是一个类似一个短视频的格式，利用它， 我们将多张照片以及他们的时区等信息直接整合，输出成一张heic图片，就能提供给Mojave使用了</p><h2 id="开始构建吧"><a href="#开始构建吧" class="headerlink" title="开始构建吧"></a>开始构建吧</h2><h3 id="工具篇"><a href="#工具篇" class="headerlink" title="工具篇"></a>工具篇</h3><p>关于工具，已经有人在github上开源了相关的构建脚本，不过请注意，只有Mac可以使用哦   <a href="https://github.com/mczachurski/wallpapper" target="_blank" rel="noopener">工具地址</a><br><img src="https://github.com/mczachurski/wallpapper/raw/master/Images/wallpaper.png" alt=""></p><h3 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h3><h4 id="安装工具"><a href="#安装工具" class="headerlink" title="安装工具"></a>安装工具</h4><p>工具有两种安装模式 <strong>Homebrew</strong> 以及 github安装，当然 如果你新装了系统，有些Xcode功能需要重新安装, 请先安装xcode-select并且输入<figure class="highlight plain"><figcaption><span>xcode-select -s</span><a href="/Applications/Xcode.app/Contents/Developer">```</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">##### Homebrew</span><br><span class="line">打开你的命令行输入</span><br><span class="line">```bash</span><br><span class="line">brew tap mczachurski/wallpapper</span><br><span class="line">brew install wallpapper</span><br></pre></td></tr></table></figure></p><h5 id="github安装"><a href="#github安装" class="headerlink" title="github安装"></a>github安装</h5><p>打开你的命令行，输入<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/mczachurski/wallpapper.git</span><br><span class="line"><span class="built_in">cd</span> wallpapper</span><br><span class="line">swift build --configuration release</span><br><span class="line">sudo cp .build/x86_64-apple-macosx10.10/release/wallpapper /usr/<span class="built_in">local</span>/bin</span><br></pre></td></tr></table></figure></p><p>注意 如果你用的swift4.1请编辑Package.swift</p><h4 id="测试工具是否可用"><a href="#测试工具是否可用" class="headerlink" title="测试工具是否可用"></a>测试工具是否可用</h4><p>和大多数软件一样<figure class="highlight plain"><figcaption><span>-h```</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">然后你会看到</span><br></pre></td></tr></table></figure></p><p>wallpapper: [command_option] -i inputFile<br>Command options are:<br> -h            show this message and exit<br> -o            output file name (default is ‘output.heic’)<br> -i            input file name, json file with wallpaper description<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">#### 构建</span><br><span class="line">前面所题，我们需要配置一些照片，并且配置每张照片的信息，所以新建一个json文件，内容类似</span><br><span class="line">```json</span><br><span class="line">[</span><br><span class="line">  &#123;</span><br><span class="line">    &quot;fileName&quot;: &quot;1.png&quot;,</span><br><span class="line">    &quot;isPrimary&quot;: true,</span><br><span class="line">    &quot;isForLight&quot;: true,</span><br><span class="line">    &quot;isForDark&quot;: false,</span><br><span class="line">    &quot;altitude&quot;: 27.95,</span><br><span class="line">    &quot;azimuth&quot;: 279.66</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    &quot;fileName&quot;: &quot;2.png&quot;,</span><br><span class="line">    &quot;isPrimary&quot;: false,</span><br><span class="line">    &quot;isForLight&quot;: false,</span><br><span class="line">    &quot;isForDark&quot;: false,</span><br><span class="line">    &quot;altitude&quot;: -31.05,</span><br><span class="line">    &quot;azimuth&quot;: 4.16</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    &quot;fileName&quot;: &quot;16.png&quot;,</span><br><span class="line">    &quot;isPrimary&quot;: false,</span><br><span class="line">    &quot;isForLight&quot;: false,</span><br><span class="line">    &quot;isForDark&quot;: true,</span><br><span class="line">    &quot;altitude&quot;: -28.63,</span><br><span class="line">    &quot;azimuth&quot;: 340.41</span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><h5 id="属性解释"><a href="#属性解释" class="headerlink" title="属性解释"></a>属性解释</h5><ul><li>fileName - 文件名，对应的图片名字</li><li>isPrimary - 是否是主图，heic的预览图就是他了，只能有一个</li><li>isForLight - 如果设置为trure，将显示在该壁纸的静态模式（白天）中</li><li>isForDark - 同上，不过是黑暗模式</li><li>altitude - 太阳和时间相关</li><li>azimuth - 太阳和时间相关<br>altitude和azimuth可以在<a href="https://keisan.casio.com/exec/system/1224682277" target="_blank" rel="noopener">https://keisan.casio.com/exec/system/1224682277</a>之中获取，填入对应时间对应的值即可</li></ul><h4 id="生成"><a href="#生成" class="headerlink" title="生成"></a>生成</h4><p><code>wallpapper -i &lt;your_json_name&gt;.json</code> 之后你就能获得一个output.heic啦，将背景壁纸设置成他就行～</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Mojave动态壁纸&quot;&gt;&lt;a href=&quot;#Mojave动态壁纸&quot; class=&quot;headerlink&quot; title=&quot;Mojave动态壁纸&quot;&gt;&lt;/a&gt;Mojave动态壁纸&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;OSX Mojave发布带来了黑暗模式，众多改进，
      
    
    </summary>
    
      <category term="可以公开的情报" scheme="https://www.mizuka.top/categories/%E5%8F%AF%E4%BB%A5%E5%85%AC%E5%BC%80%E7%9A%84%E6%83%85%E6%8A%A5/"/>
    
    
      <category term="教程" scheme="https://www.mizuka.top/tags/%E6%95%99%E7%A8%8B/"/>
    
      <category term="OSX" scheme="https://www.mizuka.top/tags/OSX/"/>
    
      <category term="mojave" scheme="https://www.mizuka.top/tags/mojave/"/>
    
      <category term="动态壁纸" scheme="https://www.mizuka.top/tags/%E5%8A%A8%E6%80%81%E5%A3%81%E7%BA%B8/"/>
    
  </entry>
  
</feed>
